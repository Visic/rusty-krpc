Ok(
    Services {
        services: [
            Service {
                name: "KRPC",
                procedures: [
                    Procedure {
                        name: "GetClientID",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bytes,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the identifier for the current client.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "GetClientName",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the name of the current client.\nThis is an empty string if the client has no name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "GetStatus",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Status,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns some information about the server, such as the version.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "GetServices",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Services,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns information on all services, procedures, classes, properties etc. provided by the server.\nCan be used by client libraries to automatically create functionality such as stubs.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AddStream",
                        parameters: [
                            Parameter {
                                name: "call",
                                r#type: Some(
                                    Type {
                                        code: ProcedureCall,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "start",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Stream,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd a streaming request and return its identifier.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "StartStream",
                        parameters: [
                            Parameter {
                                name: "id",
                                r#type: Some(
                                    Type {
                                        code: Uint64,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart a previously added streaming request.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SetStreamRate",
                        parameters: [
                            Parameter {
                                name: "id",
                                r#type: Some(
                                    Type {
                                        code: Uint64,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "rate",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the update rate for a stream in Hz.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RemoveStream",
                        parameters: [
                            Parameter {
                                name: "id",
                                r#type: Some(
                                    Type {
                                        code: Uint64,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove a streaming request.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AddEvent",
                        parameters: [
                            Parameter {
                                name: "expression",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Event,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreate an event from a server side expression.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Clients",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Bytes,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: String,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: String,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of RPC clients that are currently connected to the server.\nEach entry in the list is a clients identifier, name and address.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_CurrentGameScene",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "KRPC",
                                name: "GameScene",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet the current game scene.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Paused",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the game is paused.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_Paused",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the game is paused.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ConstantDouble",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA constant value of double precision floating point type.\n</summary>\n<param name=\"value\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ConstantFloat",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA constant value of single precision floating point type.\n</summary>\n<param name=\"value\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ConstantInt",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA constant value of integer type.\n</summary>\n<param name=\"value\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ConstantBool",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA constant value of boolean type.\n</summary>\n<param name=\"value\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ConstantString",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA constant value of string type.\n</summary>\n<param name=\"value\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Call",
                        parameters: [
                            Parameter {
                                name: "call",
                                r#type: Some(
                                    Type {
                                        code: ProcedureCall,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn RPC call.\n</summary>\n<param name=\"call\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Equal",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nEquality comparison.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_NotEqual",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nInequality comparison.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_GreaterThan",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGreater than numerical comparison.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_GreaterThanOrEqual",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGreater than or equal numerical comparison.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_LessThan",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLess than numerical comparison.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_LessThanOrEqual",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLess than or equal numerical comparison.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_And",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBoolean and operator.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Or",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBoolean or operator.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ExclusiveOr",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBoolean exclusive-or operator.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Not",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBoolean negation operator.\n</summary>\n<param name=\"arg\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Add",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumerical addition.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Subtract",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumerical subtraction.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Multiply",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumerical multiplication.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Divide",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumerical division.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Modulo",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumerical modulo operator.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n<returns>The remainder of arg0 divided by arg1</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Power",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumerical power operator.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n<returns>arg0 raised to the power of arg1, with type of arg0</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_LeftShift",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBitwise left shift.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_RightShift",
                        parameters: [
                            Parameter {
                                name: "arg0",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBitwise right shift.\n</summary>\n<param name=\"arg0\"></param>\n<param name=\"arg1\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Cast",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "type",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Type",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPerform a cast to the given type.\n</summary>\n<param name=\"arg\"></param>\n<param name=\"type\">Type to cast the argument to.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Parameter",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "type",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Type",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA named parameter of type double.\n</summary>\n<returns>A named parameter.</returns>\n<param name=\"name\">The name of the parameter.</param>\n<param name=\"type\">The type of the parameter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Function",
                        parameters: [
                            Parameter {
                                name: "parameters",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "body",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA function.\n</summary>\n<returns>A function.</returns>\n<param name=\"parameters\">The parameters of the function.</param>\n<param name=\"body\">The body of the function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Invoke",
                        parameters: [
                            Parameter {
                                name: "function",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "args",
                                r#type: Some(
                                    Type {
                                        code: Dictionary,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: String,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA function call.\n</summary>\n<returns>A function call.</returns>\n<param name=\"function\">The function to call.</param>\n<param name=\"args\">The arguments to call the function with.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_CreateTuple",
                        parameters: [
                            Parameter {
                                name: "elements",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConstruct a tuple.\n</summary>\n<returns>The tuple.</returns>\n<param name=\"elements\">The elements.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_CreateList",
                        parameters: [
                            Parameter {
                                name: "values",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConstruct a list.\n</summary>\n<returns>The list.</returns>\n<param name=\"values\">The value. Should all be of the same type.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_CreateSet",
                        parameters: [
                            Parameter {
                                name: "values",
                                r#type: Some(
                                    Type {
                                        code: Set,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConstruct a set.\n</summary>\n<returns>The set.</returns>\n<param name=\"values\">The values. Should all be of the same type.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_CreateDictionary",
                        parameters: [
                            Parameter {
                                name: "keys",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "values",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Class,
                                                service: "KRPC",
                                                name: "Expression",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConstruct a dictionary, from a list of corresponding keys and values.\n</summary>\n<returns>The dictionary.</returns>\n<param name=\"keys\">The keys. Should all be of the same type.</param>\n<param name=\"values\">The values. Should all be of the same type.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ToList",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConvert a collection to a list.\n</summary>\n<returns>The collection as a list.</returns>\n<param name=\"arg\">The collection.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_ToSet",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConvert a collection to a set.\n</summary>\n<returns>The collection as a set.</returns>\n<param name=\"arg\">The collection.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Get",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAccess an element in a tuple, list or dictionary.\n</summary>\n<returns>The element.</returns>\n<param name=\"arg\">The tuple, list or dictionary.</param>\n<param name=\"index\">The index of the element to access.\nA zero indexed integer for a tuple or list, or a key for a dictionary.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Count",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNumber of elements in a collection.\n</summary>\n<returns>The number of elements in the collection.</returns>\n<param name=\"arg\">The list, set or dictionary.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Sum",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSum all elements of a collection.\n</summary>\n<returns>The sum of the elements in the collection.</returns>\n<param name=\"arg\">The list or set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Max",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaximum of all elements in a collection.\n</summary>\n<returns>The maximum elements in the collection.</returns>\n<param name=\"arg\">The list or set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Min",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMinimum of all elements in a collection.\n</summary>\n<returns>The minimum elements in the collection.</returns>\n<param name=\"arg\">The list or set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Average",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMinimum of all elements in a collection.\n</summary>\n<returns>The minimum elements in the collection.</returns>\n<param name=\"arg\">The list or set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Select",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "func",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRun a function on every element in the collection.\n</summary>\n<returns>The modified collection.</returns>\n<param name=\"arg\">The list or set.</param>\n<param name=\"func\">The function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Where",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "func",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRun a function on every element in the collection.\n</summary>\n<returns>The modified collection.</returns>\n<param name=\"arg\">The list or set.</param>\n<param name=\"func\">The function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Contains",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDetermine if a collection contains a value.\n</summary>\n<returns>Whether the collection contains a value.</returns>\n<param name=\"arg\">The collection.</param>\n<param name=\"value\">The value to look for.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Aggregate",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "func",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nApplies an accumulator function over a sequence.\n</summary>\n<returns>The accumulated value.</returns>\n<param name=\"arg\">The collection.</param>\n<param name=\"func\">The accumulator function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_AggregateWithSeed",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "seed",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "func",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nApplies an accumulator function over a sequence, with a given seed.\n</summary>\n<returns>The accumulated value.</returns>\n<param name=\"arg\">The collection.</param>\n<param name=\"seed\">The seed value.</param>\n<param name=\"func\">The accumulator function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Concat",
                        parameters: [
                            Parameter {
                                name: "arg1",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "arg2",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConcatenate two sequences.\n</summary>\n<returns>The first sequence followed by the second sequence.</returns>\n<param name=\"arg1\">The first sequence.</param>\n<param name=\"arg2\">The second sequence.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_OrderBy",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "key",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nOrder a collection using a key function.\n</summary>\n<returns>The ordered collection.</returns>\n<param name=\"arg\">The collection to order.</param>\n<param name=\"key\">A function that takes a value from the collection and generates a key to sort on.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_All",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "predicate",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDetermine whether all items in a collection satisfy a boolean predicate.\n</summary>\n<returns>Whether all items satisfy the predicate.</returns>\n<param name=\"arg\">The collection.</param>\n<param name=\"predicate\">The predicate function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Expression_static_Any",
                        parameters: [
                            Parameter {
                                name: "arg",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "predicate",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KRPC",
                                        name: "Expression",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Expression",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDetermine whether any item in a collection satisfies a boolean predicate.\n</summary>\n<returns>Whether any item satisfies the predicate.</returns>\n<param name=\"arg\">The collection.</param>\n<param name=\"predicate\">The predicate function.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Type_static_Double",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Type",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDouble type.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Type_static_Float",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Type",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFloat type.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Type_static_Int",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Type",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nInt type.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Type_static_Bool",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Type",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBool type.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Type_static_String",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KRPC",
                                name: "Type",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nString type.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "Expression",
                        documentation: "<doc>\n<summary>\nA server side expression.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Type",
                        documentation: "<doc>\n<summary>\nA server side expression.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [
                    Enumeration {
                        name: "GameScene",
                        values: [
                            EnumerationValue {
                                name: "SpaceCenter",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe game scene showing the Kerbal Space Center buildings.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Flight",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe game scene showing a vessel in flight (or on the launchpad/runway).\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "TrackingStation",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe tracking station.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "EditorVAB",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe Vehicle Assembly Building.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "EditorSPH",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe Space Plane Hangar.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe game scene. See <see cref=\"M:KRPC.CurrentGameScene\" />.\n</summary>\n</doc>",
                    },
                ],
                exceptions: [
                    Exception {
                        name: "ArgumentException",
                        documentation: "<doc>\n<summary>\nA method was invoked where at least one of the passed arguments does not\nmeet the parameter specification of the method.\n</summary>\n</doc>",
                    },
                    Exception {
                        name: "ArgumentNullException",
                        documentation: "<doc>\n<summary>\nA null reference was passed to a method that does not accept it as a valid argument.\n</summary>\n</doc>",
                    },
                    Exception {
                        name: "ArgumentOutOfRangeException",
                        documentation: "<doc>\n<summary>\nThe value of an argument is outside the allowable range of values as defined by the invoked method.\n</summary>\n</doc>",
                    },
                    Exception {
                        name: "InvalidOperationException",
                        documentation: "<doc>\n<summary>\nA method call was made to a method that is invalid\ngiven the current state of the object.\n</summary>\n</doc>",
                    },
                ],
                documentation: "<doc>\n<summary>\nMain kRPC service, used by clients to interact with basic server functionality.\n</summary>\n</doc>",
            },
            Service {
                name: "Drawing",
                procedures: [
                    Procedure {
                        name: "AddLine",
                        parameters: [
                            Parameter {
                                name: "start",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "end",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "Drawing",
                                name: "Line",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDraw a line in the scene.\n</summary>\n<param name=\"start\">Position of the start of the line.</param>\n<param name=\"end\">Position of the end of the line.</param>\n<param name=\"referenceFrame\">Reference frame that the positions are in.</param>\n<param name=\"visible\">Whether the line is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "AddDirection",
                        parameters: [
                            Parameter {
                                name: "direction",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "length",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    32,
                                    65,
                                ],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "Drawing",
                                name: "Line",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDraw a direction vector in the scene, starting from the origin of the given reference frame.\n</summary>\n<param name=\"direction\">Direction to draw the line in.</param>\n<param name=\"referenceFrame\">Reference frame that the direction is in and defines the start position.</param>\n<param name=\"length\">The length of the line.</param>\n<param name=\"visible\">Whether the line is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "AddDirectionFromCom",
                        parameters: [
                            Parameter {
                                name: "direction",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "length",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    32,
                                    65,
                                ],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "Drawing",
                                name: "Line",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDraw a direction vector in the scene, from the center of mass of the active vessel.\n</summary>\n<param name=\"direction\">Direction to draw the line in.</param>\n<param name=\"referenceFrame\">Reference frame that the direction is in.</param>\n<param name=\"length\">The length of the line.</param>\n<param name=\"visible\">Whether the line is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "AddPolygon",
                        parameters: [
                            Parameter {
                                name: "vertices",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Tuple,
                                                service: "",
                                                name: "",
                                                types: [
                                                    Type {
                                                        code: Double,
                                                        service: "",
                                                        name: "",
                                                        types: [],
                                                    },
                                                    Type {
                                                        code: Double,
                                                        service: "",
                                                        name: "",
                                                        types: [],
                                                    },
                                                    Type {
                                                        code: Double,
                                                        service: "",
                                                        name: "",
                                                        types: [],
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "Drawing",
                                name: "Polygon",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDraw a polygon in the scene, defined by a list of vertices.\n</summary>\n<param name=\"vertices\">Vertices of the polygon.</param>\n<param name=\"referenceFrame\">Reference frame that the vertices are in.</param>\n<param name=\"visible\">Whether the polygon is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "AddText",
                        parameters: [
                            Parameter {
                                name: "text",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "rotation",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "Drawing",
                                name: "Text",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDraw text in the scene.\n</summary>\n<param name=\"text\">The string to draw.</param>\n<param name=\"referenceFrame\">Reference frame that the text position is in.</param>\n<param name=\"position\">Position of the text.</param>\n<param name=\"rotation\">Rotation of the text, as a quaternion.</param>\n<param name=\"visible\">Whether the text is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Clear",
                        parameters: [
                            Parameter {
                                name: "clientOnly",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove all objects being drawn.\n</summary>\n<param name=\"clientOnly\">If true, only remove objects created by the calling client.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Line_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_Start",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart position of the line.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_Start",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart position of the line.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_End",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nEnd position of the line.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_End",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nEnd position of the line.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_Thickness",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the thickness\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_Thickness",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the thickness\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReference frame for the positions of the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReference frame for the positions of the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_get_Material",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Line_set_Material",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Line",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_get_Vertices",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nVertices for the polygon.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_set_Vertices",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Tuple,
                                                service: "",
                                                name: "",
                                                types: [
                                                    Type {
                                                        code: Double,
                                                        service: "",
                                                        name: "",
                                                        types: [],
                                                    },
                                                    Type {
                                                        code: Double,
                                                        service: "",
                                                        name: "",
                                                        types: [],
                                                    },
                                                    Type {
                                                        code: Double,
                                                        service: "",
                                                        name: "",
                                                        types: [],
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nVertices for the polygon.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_get_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_set_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_get_Thickness",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the thickness\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_set_Thickness",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the thickness\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReference frame for the positions of the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_set_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReference frame for the positions of the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_get_Material",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Polygon_set_Material",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Polygon",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_static_AvailableFonts",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all available fonts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the text.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the text.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRotation of the text as a quaternion.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRotation of the text as a quaternion.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Content",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe text string\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Content",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe text string\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Font",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nName of the font\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Font",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nName of the font\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Size",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont size.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Size",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont size.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_CharacterSize",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCharacter size.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_CharacterSize",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCharacter size.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Style",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "UI",
                                name: "FontStyle",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont style.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Style",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "UI",
                                        name: "FontStyle",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont style.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Alignment",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "UI",
                                name: "TextAlignment",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAlignment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Alignment",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "UI",
                                        name: "TextAlignment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAlignment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_LineSpacing",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLine spacing.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_LineSpacing",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLine spacing.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Anchor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "UI",
                                name: "TextAnchor",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAnchor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Anchor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "UI",
                                        name: "TextAnchor",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAnchor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReference frame for the positions of the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReference frame for the positions of the object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Material",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Material",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "Drawing",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "Line",
                        documentation: "<doc>\n<summary>\nA line. Created using <see cref=\"M:Drawing.AddLine\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Polygon",
                        documentation: "<doc>\n<summary>\nA polygon. Created using <see cref=\"M:Drawing.AddPolygon\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Text",
                        documentation: "<doc>\n<summary>\nText. Created using <see cref=\"M:Drawing.AddText\" />.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [],
                exceptions: [],
                documentation: "<doc>\n<summary>\nProvides functionality for drawing objects in the flight scene.\n</summary>\n<remarks>\nFor drawing and interacting with the user interface, see the UI service.\n</remarks>\n</doc>",
            },
            Service {
                name: "InfernalRobotics",
                procedures: [
                    Procedure {
                        name: "ServoGroups",
                        parameters: [
                            Parameter {
                                name: "vessel",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all the servo groups in the given <paramref name=\"vessel\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroupWithName",
                        parameters: [
                            Parameter {
                                name: "vessel",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "InfernalRobotics",
                                name: "ServoGroup",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the servo group in the given <paramref name=\"vessel\" /> with the given <paramref name=\"name\" />,\nor <c>null</c> if none exists. If multiple servo groups have the same name, only one of them is returned.\n</summary>\n<param name=\"vessel\">Vessel to check.</param>\n<param name=\"name\">Name of servo group to find.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ServoWithName",
                        parameters: [
                            Parameter {
                                name: "vessel",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "InfernalRobotics",
                                name: "Servo",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the servo in the given <paramref name=\"vessel\" /> with the given <paramref name=\"name\" /> or\n<c>null</c> if none exists. If multiple servos have the same name, only one of them is returned.\n</summary>\n<param name=\"vessel\">Vessel to check.</param>\n<param name=\"name\">Name of the servo to find.</param>\n</doc>",
                    },
                    Procedure {
                        name: "get_Available",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether Infernal Robotics is installed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Ready",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether Infernal Robotics API is ready.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_MoveRight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves the servo to the right.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_MoveLeft",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves the servo to the left.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_MoveCenter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves the servo to the center.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_MoveNextPreset",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves the servo to the next preset.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_MovePrevPreset",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves the servo to the previous preset.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_MoveTo",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "speed",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves the servo to <paramref name=\"position\" /> and sets the\nspeed multiplier to <paramref name=\"speed\" />.\n</summary>\n<param name=\"position\">The position to move the servo to.</param>\n<param name=\"speed\">Speed multiplier for the movement.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_Stop",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStops the servo.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the servo.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the servo.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part containing the servo.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_Highlight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servo should be highlighted in-game.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the servo.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_MinConfigPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe minimum position of the servo, specified by the part configuration.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_MaxConfigPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum position of the servo, specified by the part configuration.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_MinPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe minimum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_MinPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe minimum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_MaxPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_MaxPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_ConfigSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed multiplier of the servo, specified by the part configuration.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed multiplier of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed multiplier of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_CurrentSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current speed at which the servo is moving.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_CurrentSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current speed at which the servo is moving.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_Acceleration",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current speed multiplier set in the UI.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_Acceleration",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current speed multiplier set in the UI.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_IsMoving",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servo is moving.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_IsFreeMoving",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servo is freely moving.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_IsLocked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servo is locked.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_IsLocked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servo is locked.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_get_IsAxisInverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servos axis is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Servo_set_IsAxisInverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the servos axis is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_ServoWithName",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "InfernalRobotics",
                                name: "Servo",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the servo with the given <paramref name=\"name\" /> from this group,\nor <c>null</c> if none exists.\n</summary>\n<param name=\"name\">Name of servo to find.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_MoveRight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves all of the servos in the group to the right.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_MoveLeft",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves all of the servos in the group to the left.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_MoveCenter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves all of the servos in the group to the center.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_MoveNextPreset",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves all of the servos in the group to the next preset.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_MovePrevPreset",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMoves all of the servos in the group to the previous preset.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_Stop",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStops the servos in the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_set_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_ForwardKey",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe key assigned to be the \"forward\" key for the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_set_ForwardKey",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe key assigned to be the \"forward\" key for the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_ReverseKey",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe key assigned to be the \"reverse\" key for the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_set_ReverseKey",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe key assigned to be the \"reverse\" key for the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed multiplier for the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_set_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed multiplier for the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_Expanded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the group is expanded in the InfernalRobotics UI.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_set_Expanded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the group is expanded in the InfernalRobotics UI.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_Servos",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "Servo",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe servos that are in the group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ServoGroup_get_Parts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "InfernalRobotics",
                                        name: "ServoGroup",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe parts containing the servos in the group.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "Servo",
                        documentation: "<doc>\n<summary>\nRepresents a servo. Obtained using\n<see cref=\"M:InfernalRobotics.ServoGroup.Servos\" />,\n<see cref=\"M:InfernalRobotics.ServoGroup.ServoWithName\" />\nor <see cref=\"M:InfernalRobotics.ServoWithName\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ServoGroup",
                        documentation: "<doc>\n<summary>\nA group of servos, obtained by calling <see cref=\"M:InfernalRobotics.ServoGroups\" />\nor <see cref=\"M:InfernalRobotics.ServoGroupWithName\" />. Represents the \"Servo Groups\"\nin the InfernalRobotics UI.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [],
                exceptions: [],
                documentation: "<doc>\n<summary>\nThis service provides functionality to interact with\n<a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/104535-112-magic-smoke-industries-infernal-robotics-202/\">Infernal Robotics</a>.\n</summary>\n</doc>",
            },
            Service {
                name: "KerbalAlarmClock",
                procedures: [
                    Procedure {
                        name: "AlarmWithName",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KerbalAlarmClock",
                                name: "Alarm",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet the alarm with the given <paramref name=\"name\" />, or <c>null</c>\nif no alarms have that name. If more than one alarm has the name,\nonly returns one of them.\n</summary>\n<param name=\"name\">Name of the alarm to search for.</param>\n</doc>",
                    },
                    Procedure {
                        name: "AlarmsWithType",
                        parameters: [
                            Parameter {
                                name: "type",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "KerbalAlarmClock",
                                        name: "AlarmType",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet a list of alarms of the specified <paramref name=\"type\" />.\n</summary>\n<param name=\"type\">Type of alarm to return.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CreateAlarm",
                        parameters: [
                            Parameter {
                                name: "type",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "KerbalAlarmClock",
                                        name: "AlarmType",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "KerbalAlarmClock",
                                name: "Alarm",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreate a new alarm and return it.\n</summary>\n<param name=\"type\">Type of the new alarm.</param>\n<param name=\"name\">Name of the new alarm.</param>\n<param name=\"ut\">Time at which the new alarm should trigger.</param>\n</doc>",
                    },
                    Procedure {
                        name: "get_Available",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether Kerbal Alarm Clock is available.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Alarms",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all the alarms.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemoves the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Action",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "KerbalAlarmClock",
                                name: "AlarmAction",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe action that the alarm triggers.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Action",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "KerbalAlarmClock",
                                        name: "AlarmAction",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe action that the alarm triggers.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Margin",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe number of seconds before the event that the alarm will fire.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Margin",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe number of seconds before the event that the alarm will fire.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Time",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time at which the alarm will fire.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Time",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time at which the alarm will fire.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Type",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "KerbalAlarmClock",
                                name: "AlarmType",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe type of the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_ID",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe unique identifier for the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe short name of the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe short name of the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Notes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe long description of the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Notes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe long description of the alarm.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Remaining",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe number of seconds until the alarm will fire.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Repeat",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the alarm will be repeated after it has fired.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Repeat",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the alarm will be repeated after it has fired.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_RepeatPeriod",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time delay to automatically create an alarm after it has fired.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_RepeatPeriod",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time delay to automatically create an alarm after it has fired.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_Vessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessel that the alarm is attached to.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_Vessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessel that the alarm is attached to.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_XferOriginBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the vessel is departing from.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_XferOriginBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the vessel is departing from.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_get_XferTargetBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the vessel is arriving at.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Alarm_set_XferTargetBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "KerbalAlarmClock",
                                        name: "Alarm",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the vessel is arriving at.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "Alarm",
                        documentation: "<doc>\n<summary>\nRepresents an alarm. Obtained by calling\n<see cref=\"M:KerbalAlarmClock.Alarms\" />,\n<see cref=\"M:KerbalAlarmClock.AlarmWithName\" /> or\n<see cref=\"M:KerbalAlarmClock.AlarmsWithType\" />.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [
                    Enumeration {
                        name: "AlarmAction",
                        values: [
                            EnumerationValue {
                                name: "DoNothing",
                                value: 0,
                                documentation: "<doc>\n<summary>\nDon't do anything at all...\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "DoNothingDeleteWhenPassed",
                                value: 1,
                                documentation: "<doc>\n<summary>\nDon't do anything, and delete the alarm.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "KillWarp",
                                value: 2,
                                documentation: "<doc>\n<summary>\nDrop out of time warp.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "KillWarpOnly",
                                value: 3,
                                documentation: "<doc>\n<summary>\nDrop out of time warp.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "MessageOnly",
                                value: 4,
                                documentation: "<doc>\n<summary>\nDisplay a message.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "PauseGame",
                                value: 5,
                                documentation: "<doc>\n<summary>\nPause the game.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe action performed by an alarm when it fires.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "AlarmType",
                        values: [
                            EnumerationValue {
                                name: "Raw",
                                value: 0,
                                documentation: "<doc>\n<summary>\nAn alarm for a specific date/time or a specific period in the future.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Maneuver",
                                value: 1,
                                documentation: "<doc>\n<summary>\nAn alarm based on the next maneuver node on the current ships flight path.\nThis node will be stored and can be restored when you come back to the ship.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "ManeuverAuto",
                                value: 2,
                                documentation: "<doc>\n<summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.Maneuver\" />.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Apoapsis",
                                value: 3,
                                documentation: "<doc>\n<summary>\nAn alarm for furthest part of the orbit from the planet.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Periapsis",
                                value: 4,
                                documentation: "<doc>\n<summary>\nAn alarm for nearest part of the orbit from the planet.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "AscendingNode",
                                value: 5,
                                documentation: "<doc>\n<summary>\nAscending node for the targeted object, or equatorial ascending node.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "DescendingNode",
                                value: 6,
                                documentation: "<doc>\n<summary>\nDescending node for the targeted object, or equatorial descending node.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Closest",
                                value: 7,
                                documentation: "<doc>\n<summary>\nAn alarm based on the closest approach of this vessel to the targeted\nvessel, some number of orbits into the future.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Contract",
                                value: 8,
                                documentation: "<doc>\n<summary>\nAn alarm based on the expiry or deadline of contracts in career modes.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "ContractAuto",
                                value: 9,
                                documentation: "<doc>\n<summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.Contract\" />.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Crew",
                                value: 10,
                                documentation: "<doc>\n<summary>\nAn alarm that is attached to a crew member.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Distance",
                                value: 11,
                                documentation: "<doc>\n<summary>\nAn alarm that is triggered when a selected target comes within a chosen distance.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "EarthTime",
                                value: 12,
                                documentation: "<doc>\n<summary>\nAn alarm based on the time in the \"Earth\" alternative Universe (aka the Real World).\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "LaunchRendevous",
                                value: 13,
                                documentation: "<doc>\n<summary>\nAn alarm that fires as your landed craft passes under the orbit of your target.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "SOIChange",
                                value: 14,
                                documentation: "<doc>\n<summary>\nAn alarm manually based on when the next SOI point is on the flight path\nor set to continually monitor the active flight path and add alarms as it\ndetects SOI changes.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "SOIChangeAuto",
                                value: 15,
                                documentation: "<doc>\n<summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.SOIChange\" />.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Transfer",
                                value: 16,
                                documentation: "<doc>\n<summary>\nAn alarm based on Interplanetary Transfer Phase Angles, i.e. when should\nI launch to planet X? Based on Kosmo Not's post and used in Olex's\nCalculator.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "TransferModelled",
                                value: 17,
                                documentation: "<doc>\n<summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.Transfer\" />.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe type of an alarm.\n</summary>\n</doc>",
                    },
                ],
                exceptions: [],
                documentation: "<doc>\n<summary>\nThis service provides functionality to interact with\n<a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/22809-13x-kerbal-alarm-clock-v3850-may-30/\">Kerbal Alarm Clock</a>.\n</summary>\n</doc>",
            },
            Service {
                name: "RemoteTech",
                procedures: [
                    Procedure {
                        name: "Comms",
                        parameters: [
                            Parameter {
                                name: "vessel",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "RemoteTech",
                                name: "Comms",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet a communications object, representing the communication capability of a particular vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna",
                        parameters: [
                            Parameter {
                                name: "part",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "RemoteTech",
                                name: "Antenna",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet the antenna object for a particular part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Available",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether RemoteTech is installed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_GroundStations",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe names of the ground stations.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet the part containing this antenna.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_HasConnection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the antenna has a connection.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Target",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "RemoteTech",
                                name: "Target",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe object that the antenna is targetting.\nThis property can be used to set the target to <see cref=\"M:RemoteTech.Target.None\" /> or <see cref=\"M:RemoteTech.Target.ActiveVessel\" />.\nTo set the target to a celestial body, ground station or vessel see <see cref=\"M:RemoteTech.Antenna.TargetBody\" />,\n<see cref=\"M:RemoteTech.Antenna.TargetGroundStation\" /> and <see cref=\"M:RemoteTech.Antenna.TargetVessel\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_set_Target",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "RemoteTech",
                                        name: "Target",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe object that the antenna is targetting.\nThis property can be used to set the target to <see cref=\"M:RemoteTech.Target.None\" /> or <see cref=\"M:RemoteTech.Target.ActiveVessel\" />.\nTo set the target to a celestial body, ground station or vessel see <see cref=\"M:RemoteTech.Antenna.TargetBody\" />,\n<see cref=\"M:RemoteTech.Antenna.TargetGroundStation\" /> and <see cref=\"M:RemoteTech.Antenna.TargetVessel\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_TargetBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the antenna is targetting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_set_TargetBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the antenna is targetting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_TargetGroundStation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe ground station the antenna is targetting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_set_TargetGroundStation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe ground station the antenna is targetting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_TargetVessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessel the antenna is targetting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_set_TargetVessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessel the antenna is targetting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_SignalDelayToVessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "other",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe signal delay between the this vessel and another vessel, in seconds.\n</summary>\n<param name=\"other\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_Vessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGet the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_HasLocalControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel can be controlled locally.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_HasFlightComputer",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel has a flight computer on board.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_HasConnection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel has any connection.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_HasConnectionToGroundStation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel has a connection to a ground station.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_SignalDelay",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe shortest signal delay to the vessel, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_SignalDelayToGroundStation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe signal delay between the vessel and the closest ground station, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_Antennas",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "RemoteTech",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe antennas for this vessel.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "Antenna",
                        documentation: "<doc>\n<summary>\nA RemoteTech antenna. Obtained by calling <see cref=\"M:RemoteTech.Comms.Antennas\" /> or <see cref=\"M:RemoteTech.Antenna\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Comms",
                        documentation: "<doc>\n<summary>\nCommunications for a vessel.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [
                    Enumeration {
                        name: "Target",
                        values: [
                            EnumerationValue {
                                name: "ActiveVessel",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe active vessel.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "CelestialBody",
                                value: 1,
                                documentation: "<doc>\n<summary>\nA celestial body.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "GroundStation",
                                value: 2,
                                documentation: "<doc>\n<summary>\nA ground station.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Vessel",
                                value: 3,
                                documentation: "<doc>\n<summary>\nA specific vessel.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "None",
                                value: 4,
                                documentation: "<doc>\n<summary>\nNo target.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe type of object an antenna is targetting.\nSee <see cref=\"M:RemoteTech.Antenna.Target\" />.\n</summary>\n</doc>",
                    },
                ],
                exceptions: [],
                documentation: "<doc>\n<summary>\nThis service provides functionality to interact with\n<a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/139167-13-remotetech-v188-2017-09-03/\">RemoteTech</a>.\n</summary>\n</doc>",
            },
            Service {
                name: "SpaceCenter",
                procedures: [
                    Procedure {
                        name: "ClearTarget",
                        parameters: [],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nClears the current target.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "LaunchableVessels",
                        parameters: [
                            Parameter {
                                name: "craftDirectory",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns a list of vessels from the given <paramref name=\"craftDirectory\" />\nthat can be launched.\n</summary>\n<param name=\"craftDirectory\">Name of the directory in the current saves\n\"Ships\" directory. For example <c>\"VAB\"</c> or <c>\"SPH\"</c>.</param>\n</doc>",
                    },
                    Procedure {
                        name: "LaunchVessel",
                        parameters: [
                            Parameter {
                                name: "craftDirectory",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "launchSite",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "recover",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLaunch a vessel.\n</summary>\n<param name=\"craftDirectory\">Name of the directory in the current saves\n\"Ships\" directory, that contains the craft file.\nFor example <c>\"VAB\"</c> or <c>\"SPH\"</c>.</param>\n<param name=\"name\">Name of the vessel to launch. This is the name of the \".craft\" file\nin the save directory, without the \".craft\" file extension.</param>\n<param name=\"launchSite\">Name of the launch site. For example <c>\"LaunchPad\"</c> or\n<c>\"Runway\"</c>.</param>\n<param name=\"recover\">If true and there is a vessel on the launch site,\nrecover it before launching.</param>\n<remarks>\nThrows an exception if any of the games pre-flight checks fail.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "LaunchVesselFromVAB",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "recover",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLaunch a new vessel from the VAB onto the launchpad.\n</summary>\n<param name=\"name\">Name of the vessel to launch.</param>\n<param name=\"recover\">If true and there is a vessel on the launch pad,\nrecover it before launching.</param>\n<remarks>\nThis is equivalent to calling <see cref=\"M:SpaceCenter.LaunchVessel\" /> with the craft directory\nset to \"VAB\" and the launch site set to \"LaunchPad\".\nThrows an exception if any of the games pre-flight checks fail.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "LaunchVesselFromSPH",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "recover",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLaunch a new vessel from the SPH onto the runway.\n</summary>\n<param name=\"name\">Name of the vessel to launch.</param>\n<param name=\"recover\">If true and there is a vessel on the runway,\nrecover it before launching.</param>\n<remarks>\nThis is equivalent to calling <see cref=\"M:SpaceCenter.LaunchVessel\" /> with the craft directory\nset to \"SPH\" and the launch site set to \"Runway\".\nThrows an exception if any of the games pre-flight checks fail.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Save",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSave the game with a given name.\nThis will create a save file called <c>name.sfs</c> in the folder of the\ncurrent save game.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Load",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLoad the game with the given name.\nThis will create a load a save file called <c>name.sfs</c> from the folder of the\ncurrent save game.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Quicksave",
                        parameters: [],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSave a quicksave.\n</summary>\n<remarks>\nThis is the same as calling <see cref=\"M:SpaceCenter.Save\" /> with the name \"quicksave\".\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Quickload",
                        parameters: [],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLoad a quicksave.\n</summary>\n<remarks>\nThis is the same as calling <see cref=\"M:SpaceCenter.Load\" /> with the name \"quicksave\".\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "CanRailsWarpAt",
                        parameters: [
                            Parameter {
                                name: "factor",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    2,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns <c>true</c> if regular \"on-rails\" time warp can be used, at the specified warp\n<paramref name=\"factor\" />. The maximum time warp rate is limited by various things,\nincluding how close the active vessel is to a planet. See\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/Time_warp\">the KSP wiki</a>\nfor details.\n</summary>\n<param name=\"factor\">The warp factor to check.</param>\n</doc>",
                    },
                    Procedure {
                        name: "WarpTo",
                        parameters: [
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "maxRailsRate",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    80,
                                    195,
                                    71,
                                ],
                            },
                            Parameter {
                                name: "maxPhysicsRate",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    0,
                                    64,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nUses time acceleration to warp forward to a time in the future, specified\nby universal time <paramref name=\"ut\" />. This call blocks until the desired\ntime is reached. Uses regular \"on-rails\" or physical time warp as appropriate.\nFor example, physical time warp is used when the active vessel is traveling\nthrough an atmosphere. When using regular \"on-rails\" time warp, the warp\nrate is limited by <paramref name=\"maxRailsRate\" />, and when using physical\ntime warp, the warp rate is limited by <paramref name=\"maxPhysicsRate\" />.\n</summary>\n<param name=\"ut\">The universal time to warp to, in seconds.</param>\n<param name=\"maxRailsRate\">The maximum warp rate in regular \"on-rails\" time warp.\n</param>\n<param name=\"maxPhysicsRate\">The maximum warp rate in physical time warp.</param>\n<returns>When the time warp is complete.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "TransformPosition",
                        parameters: [
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "from",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "to",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConverts a position from one reference frame to another.\n</summary>\n<param name=\"position\">Position, as a vector, in reference frame\n<paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the position is in.</param>\n<param name=\"to\">The reference frame to covert the position to.</param>\n<returns>The corresponding position, as a vector, in reference frame\n<paramref name=\"to\" />.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "TransformDirection",
                        parameters: [
                            Parameter {
                                name: "direction",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "from",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "to",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConverts a direction from one reference frame to another.\n</summary>\n<param name=\"direction\">Direction, as a vector, in reference frame\n<paramref name=\"from\" />. </param>\n<param name=\"from\">The reference frame that the direction is in.</param>\n<param name=\"to\">The reference frame to covert the direction to.</param>\n<returns>The corresponding direction, as a vector, in reference frame\n<paramref name=\"to\" />.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "TransformRotation",
                        parameters: [
                            Parameter {
                                name: "rotation",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "from",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "to",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConverts a rotation from one reference frame to another.\n</summary>\n<param name=\"rotation\">Rotation, as a quaternion of the form <math>(x, y, z, w)</math>,\nin reference frame <paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the rotation is in.</param>\n<param name=\"to\">The reference frame to covert the rotation to.</param>\n<returns>The corresponding rotation, as a quaternion of the form\n<math>(x, y, z, w)</math>, in reference frame <paramref name=\"to\" />.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "TransformVelocity",
                        parameters: [
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "velocity",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "from",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "to",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nConverts a velocity (acting at the specified position) from one reference frame\nto another. The position is required to take the relative angular velocity of the\nreference frames into account.\n</summary>\n<param name=\"position\">Position, as a vector, in reference frame\n<paramref name=\"from\" />.</param>\n<param name=\"velocity\">Velocity, as a vector that points in the direction of travel and\nwhose magnitude is the speed in meters per second, in reference frame\n<paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the position and velocity are in.</param>\n<param name=\"to\">The reference frame to covert the velocity to.</param>\n<returns>The corresponding velocity, as a vector, in reference frame\n<paramref name=\"to\" />.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "RaycastDistance",
                        parameters: [
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "direction",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCast a ray from a given position in a given direction, and return the distance to the hit point.\nIf no hit occurs, returns infinity.\n</summary>\n<param name=\"position\">Position, as a vector, of the origin of the ray.</param>\n<param name=\"direction\">Direction of the ray, as a unit vector.</param>\n<param name=\"referenceFrame\">The reference frame that the position and direction are in.</param>\n<returns>The distance to the hit, in meters, or infinity if there was no hit.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "RaycastPart",
                        parameters: [
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "direction",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCast a ray from a given position in a given direction, and return the part that it hits.\nIf no hit occurs, returns <c>null</c>.\n</summary>\n<param name=\"position\">Position, as a vector, of the origin of the ray.</param>\n<param name=\"direction\">Direction of the ray, as a unit vector.</param>\n<param name=\"referenceFrame\">The reference frame that the position and direction are in.</param>\n<returns>The part that was hit or <c>null</c> if there was no hit.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "get_GameMode",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "GameMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current mode the game is in.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Science",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of science.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Funds",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of funds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Reputation",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of reputation.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_ActiveVessel",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently active vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_ActiveVessel",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently active vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Vessels",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all the vessels in the game.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Bodies",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Dictionary,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA dictionary of all celestial bodies (planets, moons, etc.) in the game,\nkeyed by the name of the body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_TargetBody",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently targeted celestial body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_TargetBody",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently targeted celestial body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_TargetVessel",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently targeted vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_TargetVessel",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently targeted vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_TargetDockingPort",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "DockingPort",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently targeted docking port.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_TargetDockingPort",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe currently targeted docking port.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_WaypointManager",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "WaypointManager",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe waypoint manager.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_ContractManager",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ContractManager",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe contract manager.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Camera",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Camera",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn object that can be used to control the camera.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_UIVisible",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_UIVisible",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_Navball",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the navball is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_Navball",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the navball is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_UT",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current universal time in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_G",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe value of the <a href=\"https://en.wikipedia.org/wiki/Gravitational_constant\">\ngravitational constant</a> G in <math>N(m/kg)^2</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_WarpMode",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "WarpMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current time warp mode. Returns <see cref=\"M:SpaceCenter.WarpMode.None\" /> if time\nwarp is not active, <see cref=\"M:SpaceCenter.WarpMode.Rails\" /> if regular \"on-rails\" time warp\nis active, or <see cref=\"M:SpaceCenter.WarpMode.Physics\" /> if physical time warp is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_WarpRate",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current warp rate. This is the rate at which time is passing for\neither on-rails or physical time warp. For example, a value of 10 means\ntime is passing 10x faster than normal. Returns 1 if time warp is not\nactive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_WarpFactor",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current warp factor. This is the index of the rate at which time\nis passing for either regular \"on-rails\" or physical time warp. Returns 0\nif time warp is not active. When in on-rails time warp, this is equal to\n<see cref=\"M:SpaceCenter.RailsWarpFactor\" />, and in physics time warp, this is equal to\n<see cref=\"M:SpaceCenter.PhysicsWarpFactor\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_RailsWarpFactor",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time warp rate, using regular \"on-rails\" time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\n\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See <a href=\"https://wiki.kerbalspaceprogram.com/wiki/Time_warp\">\nthe KSP wiki</a> for details.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_RailsWarpFactor",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time warp rate, using regular \"on-rails\" time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\n\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See <a href=\"https://wiki.kerbalspaceprogram.com/wiki/Time_warp\">\nthe KSP wiki</a> for details.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_PhysicsWarpFactor",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular \"on-rails\" time warp is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "set_PhysicsWarpFactor",
                        parameters: [
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular \"on-rails\" time warp is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_MaximumRailsWarpFactor",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current maximum regular \"on-rails\" warp factor that can be set.\nA value between 0 and 7 inclusive. See\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/Time_warp\">the KSP wiki</a>\nfor details.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "get_FARAvailable",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a> is installed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_Engage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nEngage the auto-pilot.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_Disengage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDisengage the auto-pilot.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_Wait",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nBlocks until the vessel is pointing in the target direction and has\nthe target roll (if set). Throws an exception if the auto-pilot has not been engaged.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_TargetPitchAndHeading",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "pitch",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "heading",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet target pitch and heading angles.\n</summary>\n<param name=\"pitch\">Target pitch angle, in degrees between -90° and +90°.</param>\n<param name=\"heading\">Target heading angle, in degrees between 0° and 360°.</param>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_Error",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe error, in degrees, between the direction the ship has been asked\nto point in and the direction it is pointing in. Throws an exception if the auto-pilot\nhas not been engaged and SAS is not enabled or is in stability assist mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_PitchError",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe error, in degrees, between the vessels current and target pitch.\nThrows an exception if the auto-pilot has not been engaged.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_HeadingError",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe error, in degrees, between the vessels current and target heading.\nThrows an exception if the auto-pilot has not been engaged.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_RollError",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe error, in degrees, between the vessels current and target roll.\nThrows an exception if the auto-pilot has not been engaged or no target roll is set.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame for the target direction (<see cref=\"M:SpaceCenter.AutoPilot.TargetDirection\" />).\n</summary>\n<remarks>\nAn error will be thrown if this property is set to a reference frame that rotates with\nthe vessel being controlled, as it is impossible to rotate the vessel in such a\nreference frame.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame for the target direction (<see cref=\"M:SpaceCenter.AutoPilot.TargetDirection\" />).\n</summary>\n<remarks>\nAn error will be thrown if this property is set to a reference frame that rotates with\nthe vessel being controlled, as it is impossible to rotate the vessel in such a\nreference frame.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_TargetPitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target pitch, in degrees, between -90° and +90°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_TargetPitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target pitch, in degrees, between -90° and +90°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_TargetHeading",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target heading, in degrees, between 0° and 360°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_TargetHeading",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target heading, in degrees, between 0° and 360°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_TargetRoll",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target roll, in degrees. <c>NaN</c> if no target roll is set.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_TargetRoll",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target roll, in degrees. <c>NaN</c> if no target roll is set.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_TargetDirection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDirection vector corresponding to the target pitch and heading.\nThis is in the reference frame specified by <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_TargetDirection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDirection vector corresponding to the target pitch and heading.\nThis is in the reference frame specified by <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_SAS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SAS\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_SAS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SAS\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_SASMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "SASMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to the left of the navball that appear\nwhen SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SASMode\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_SASMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "SpaceCenter",
                                        name: "SASMode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to the left of the navball that appear\nwhen SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SASMode\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_RollThreshold",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_RollThreshold",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_StoppingTime",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll\nand yaw axes. Defaults to 0.5 seconds for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_StoppingTime",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll\nand yaw axes. Defaults to 0.5 seconds for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_DecelerationTime",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_DecelerationTime",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_AttenuationAngle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe angle at which the autopilot considers the vessel to be pointing\nclose to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1° for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_AttenuationAngle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe angle at which the autopilot considers the vessel to be pointing\nclose to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1° for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_AutoTune",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the rotation rate controllers PID parameters should be automatically tuned\nusing the vessels moment of inertia and available torque. Defaults to <c>true</c>.\nSee <see cref=\"M:SpaceCenter.AutoPilot.TimeToPeak\" /> and <see cref=\"M:SpaceCenter.AutoPilot.Overshoot\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_AutoTune",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the rotation rate controllers PID parameters should be automatically tuned\nusing the vessels moment of inertia and available torque. Defaults to <c>true</c>.\nSee <see cref=\"M:SpaceCenter.AutoPilot.TimeToPeak\" /> and <see cref=\"M:SpaceCenter.AutoPilot.Overshoot\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_TimeToPeak",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_TimeToPeak",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_Overshoot",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_Overshoot",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_PitchPIDGains",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGains for the pitch PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically,\nwhich will overwrite any manual changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_PitchPIDGains",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGains for the pitch PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically,\nwhich will overwrite any manual changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_RollPIDGains",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGains for the roll PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically,\nwhich will overwrite any manual changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_RollPIDGains",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGains for the roll PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically,\nwhich will overwrite any manual changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_get_YawPIDGains",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGains for the yaw PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically,\nwhich will overwrite any manual changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "AutoPilot_set_YawPIDGains",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "AutoPilot",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGains for the yaw PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically,\nwhich will overwrite any manual changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_Mode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "CameraMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current mode of the camera.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_Mode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "SpaceCenter",
                                        name: "CameraMode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current mode of the camera.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_Pitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe pitch of the camera, in degrees.\nA value between <see cref=\"M:SpaceCenter.Camera.MinPitch\" /> and <see cref=\"M:SpaceCenter.Camera.MaxPitch\" /></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_Pitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe pitch of the camera, in degrees.\nA value between <see cref=\"M:SpaceCenter.Camera.MinPitch\" /> and <see cref=\"M:SpaceCenter.Camera.MaxPitch\" /></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_Heading",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe heading of the camera, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_Heading",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe heading of the camera, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_Distance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe distance from the camera to the subject, in meters.\nA value between <see cref=\"M:SpaceCenter.Camera.MinDistance\" /> and <see cref=\"M:SpaceCenter.Camera.MaxDistance\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_Distance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe distance from the camera to the subject, in meters.\nA value between <see cref=\"M:SpaceCenter.Camera.MinDistance\" /> and <see cref=\"M:SpaceCenter.Camera.MaxDistance\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_MinPitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe minimum pitch of the camera.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_MaxPitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum pitch of the camera.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_MinDistance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMinimum distance from the camera to the subject, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_MaxDistance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaximum distance from the camera to the subject, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_DefaultDistance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDefault distance from the camera to the subject, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_FocussedBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIn map mode, the celestial body that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_FocussedBody",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIn map mode, the celestial body that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_FocussedVessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIn map mode, the vessel that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_FocussedVessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIn map mode, the vessel that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_get_FocussedNode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Node",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIn map mode, the maneuver node that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Camera_set_FocussedNode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Camera",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIn map mode, the maneuver node that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_SurfaceHeight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe height of the surface relative to mean sea level, in meters,\nat the given position. When over water this is equal to 0.\n</summary>\n<param name=\"latitude\">Latitude in degrees.</param>\n<param name=\"longitude\">Longitude in degrees.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_BedrockHeight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe height of the surface relative to mean sea level, in meters,\nat the given position. When over water, this is the height\nof the sea-bed and is therefore  negative value.\n</summary>\n<param name=\"latitude\">Latitude in degrees.</param>\n<param name=\"longitude\">Longitude in degrees.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_MSLPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at mean sea level at the given latitude and longitude,\nin the given reference frame.\n</summary>\n<returns>Position as a vector.</returns>\n<param name=\"latitude\">Latitude in degrees.</param>\n<param name=\"longitude\">Longitude in degrees.</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_SurfacePosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position of the surface of the water.\n</summary>\n<returns>Position as a vector.</returns>\n<param name=\"latitude\">Latitude in degrees.</param>\n<param name=\"longitude\">Longitude in degrees.</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_BedrockPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position at the bottom of the sea-bed.\n</summary>\n<returns>Position as a vector.</returns>\n<param name=\"latitude\">Latitude in degrees.</param>\n<param name=\"longitude\">Longitude in degrees.</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_PositionAtAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "altitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at the given latitude, longitude and altitude, in the given reference frame.\n</summary>\n<returns>Position as a vector.</returns>\n<param name=\"latitude\">Latitude in degrees.</param>\n<param name=\"longitude\">Longitude in degrees.</param>\n<param name=\"altitude\">Altitude in meters above sea level.</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_LatitudeAtPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe latitude of the given position, in the given reference frame.\n</summary>\n<param name=\"position\">Position as a vector.</param>\n<param name=\"referenceFrame\">Reference frame for the position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_LongitudeAtPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe longitude of the given position, in the given reference frame.\n</summary>\n<param name=\"position\">Position as a vector.</param>\n<param name=\"referenceFrame\">Reference frame for the position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_AltitudeAtPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude, in meters, of the given position in the given reference frame.\n</summary>\n<param name=\"position\">Position as a vector.</param>\n<param name=\"referenceFrame\">Reference frame for the position vector.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_AtmosphericDensityAtPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe atmospheric density at the given position, in <math>kg/m^3</math>,\nin the given reference frame.\n</summary>\n<param name=\"position\">The position vector at which to measure the density.</param>\n<param name=\"referenceFrame\">Reference frame that the position vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_TemperatureAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe temperature on the body at the given position, in the given reference frame.\n</summary>\n<param name=\"position\">Position as a vector.</param>\n<param name=\"referenceFrame\">The reference frame that the position is in.</param>\n<remarks>\nThis calculation is performed using the bodies current position, which means that\nthe value could be wrong if you want to know the temperature in the far future.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_DensityAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "altitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGets the air density, in <math>kg/m^3</math>, for the specified\naltitude above sea level, in meters.\n</summary>\n<remarks>\nThis is an approximation, because actual calculations, taking sun exposure into account\nto compute air temperature, require us to know the exact point on the body where the\ndensity is to be computed (knowing the altitude is not enough).\nHowever, the difference is small for high altitudes, so it makes very little difference\nfor trajectory prediction.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_PressureAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "altitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGets the air pressure, in Pascals, for the specified\naltitude above sea level, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_BiomeAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe biome at the given latitude and longitude, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the center of the body, in the specified reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_Velocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe linear velocity of the body, in the specified reference frame.\n</summary>\n<returns>The velocity as a vector. The vector points in the direction of travel,\nand its magnitude is the speed of the body in meters per second.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nvelocity vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rotation of the body, in the specified reference frame.\n</summary>\n<returns>The rotation as a quaternion of the form <math>(x, y, z, w)</math>.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nrotation is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_Direction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction in which the north pole of the celestial body is pointing,\nin the specified reference frame.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_AngularVelocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe angular velocity of the body in the specified reference frame.\n</summary>\n<returns>The angular velocity as a vector. The magnitude of the vector is the rotational\nspeed of the body, in radians per second. The direction of the vector indicates the axis\nof rotation, using the right-hand rule.</returns>\n<param name=\"referenceFrame\">The reference frame the returned\nangular velocity is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_Satellites",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of celestial bodies that are in orbit around this celestial body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_Mass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe mass of the body, in kilograms.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_GravitationalParameter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Standard_gravitational_parameter\">standard\ngravitational parameter</a> of the body in <math>m^3s^{-2}</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_SurfaceGravity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe acceleration due to gravity at sea level (mean altitude) on the body,\nin <math>m/s^2</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_RotationalPeriod",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe sidereal rotational period of the body, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_RotationalSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rotational speed of the body, in radians per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_RotationAngle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current rotation angle of the body, in radians.\nA value between 0 and <math>2\\pi</math></summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_InitialRotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe initial rotation angle of the body (at UT 0), in radians.\nA value between 0 and <math>2\\pi</math></summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_EquatorialRadius",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe equatorial radius of the body, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_SphereOfInfluence",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe radius of the sphere of influence of the body, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_Orbit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Orbit",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe orbit of the body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_HasAtmosphere",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if the body has an atmosphere.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_AtmosphereDepth",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe depth of the atmosphere, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_HasAtmosphericOxygen",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if there is oxygen in the atmosphere, required for air-breathing engines.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_Biomes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Set,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe biomes present on this body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_FlyingHighAltitudeThreshold",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude, in meters, above which a vessel is considered to be\nflying \"high\" when doing science.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_SpaceHighAltitudeThreshold",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude, in meters, above which a vessel is considered to be\nin \"high\" space when doing science.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the celestial body.\n<list type=\"bullet\"><item><description>The origin is at the center of the body.\n</description></item><item><description>The axes rotate with the body.</description></item><item><description>The x-axis points from the center of the body\ntowards the intersection of the prime meridian and equator (the\nposition at 0° longitude, 0° latitude).</description></item><item><description>The y-axis points from the center of the body\ntowards the north pole.</description></item><item><description>The z-axis points from the center of the body\ntowards the equator at 90°E longitude.</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_NonRotatingReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to this celestial body, and\norientated in a fixed direction (it does not rotate with the body).\n<list type=\"bullet\"><item><description>The origin is at the center of the body.</description></item><item><description>The axes do not rotate.</description></item><item><description>The x-axis points in an arbitrary direction through the\nequator.</description></item><item><description>The y-axis points from the center of the body towards\nthe north pole.</description></item><item><description>The z-axis points in an arbitrary direction through the\nequator.</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "CelestialBody_get_OrbitalReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to this celestial body, but\norientated with the body's orbital prograde/normal/radial directions.\n<list type=\"bullet\"><item><description>The origin is at the center of the body.\n</description></item><item><description>The axes rotate with the orbital prograde/normal/radial\ndirections.</description></item><item><description>The x-axis points in the orbital anti-radial direction.\n</description></item><item><description>The y-axis points in the orbital prograde direction.\n</description></item><item><description>The z-axis points in the orbital normal direction.\n</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommLink_get_Type",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommLink",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "CommLinkType",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe type of link.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommLink_get_SignalStrength",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommLink",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSignal strength of the link.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommLink_get_Start",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommLink",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CommNode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart point of the link.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommLink_get_End",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommLink",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CommNode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart point of the link.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommNode_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommNode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nName of the communication node.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommNode_get_IsHome",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommNode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the communication node is on Kerbin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommNode_get_IsControlPoint",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommNode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the communication node is a control point, for example a manned vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommNode_get_IsVessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommNode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the communication node is a vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CommNode_get_Vessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommNode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessel for this communication node.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_CanCommunicate",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel can communicate with KSC.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_CanTransmitScience",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel can transmit science data to KSC.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_SignalStrength",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSignal strength to KSC.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_SignalDelay",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSignal delay to KSC in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_Power",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe combined power of all active antennae on the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Comms_get_ControlPath",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Comms",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CommLink",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe communication path used to control the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_Cancel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCancel an active contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_Accept",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAccept an offered contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_Decline",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDecline an offered contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Type",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nType of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Title",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTitle of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Description",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDescription of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Notes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNotes for the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Synopsis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSynopsis for the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Keywords",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nKeywords for the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ContractState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nState of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Failed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract has been failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Seen",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract has been seen.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Read",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract has been read.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_CanBeCanceled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract can be canceled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_CanBeDeclined",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract can be declined.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_CanBeFailed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract can be failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_FundsAdvance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFunds received when accepting the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_FundsCompletion",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFunds received on completion of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_FundsFailure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFunds lost if the contract is failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_ReputationCompletion",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReputation gained on completion of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_ReputationFailure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReputation lost if the contract is failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_ScienceCompletion",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nScience gained on completion of the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Contract_get_Parameters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nParameters for the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractManager_get_Types",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Set,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all contract types.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractManager_get_AllContracts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all contracts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractManager_get_ActiveContracts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all active contracts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractManager_get_OfferedContracts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all offered, but unaccepted, contracts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractManager_get_CompletedContracts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all completed contracts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractManager_get_FailedContracts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Contract",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all failed contracts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_Title",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTitle of the parameter.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_Notes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nNotes for the parameter.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_Children",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nChild contract parameters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_Completed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the parameter has been completed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_Failed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the parameter has been failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_Optional",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the contract parameter is optional.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_FundsCompletion",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFunds received on completion of the contract parameter.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_FundsFailure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFunds lost if the contract parameter is failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_ReputationCompletion",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReputation gained on completion of the contract parameter.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_ReputationFailure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReputation lost if the contract parameter is failed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ContractParameter_get_ScienceCompletion",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ContractParameter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nScience gained on completion of the contract parameter.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_ActivateNextStage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nActivates the next stage. Equivalent to pressing the space bar in-game.\n</summary>\n<returns>A list of vessel objects that are jettisoned from the active vessel.</returns>\n<remarks>\nWhen called, the active vessel may change. It is therefore possible that,\nafter calling this function, the object(s) returned by previous call(s) to\n<see cref=\"M:SpaceCenter.ActiveVessel\" /> no longer refer to the active vessel.\nThrows an exception if staging is locked.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_GetActionGroup",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "group",
                                r#type: Some(
                                    Type {
                                        code: Uint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns <c>true</c> if the given action group is enabled.\n</summary>\n<param name=\"group\">\nA number between 0 and 9 inclusive,\nor between 0 and 250 inclusive when the <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/67235-122dec1016-action-groups-extended-250-action-groups-in-flight-editing-now-kosremotetech/\">Extended Action Groups mod</a> is installed.\n</param>\n</doc>",
                    },
                    Procedure {
                        name: "Control_SetActionGroup",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "group",
                                r#type: Some(
                                    Type {
                                        code: Uint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "state",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSets the state of the given action group.\n</summary>\n<param name=\"group\">\nA number between 0 and 9 inclusive,\nor between 0 and 250 inclusive when the <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/67235-122dec1016-action-groups-extended-250-action-groups-in-flight-editing-now-kosremotetech/\">Extended Action Groups mod</a> is installed.\n</param>\n<param name=\"state\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Control_ToggleActionGroup",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "group",
                                r#type: Some(
                                    Type {
                                        code: Uint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nToggles the state of the given action group.\n</summary>\n<param name=\"group\">\nA number between 0 and 9 inclusive,\nor between 0 and 250 inclusive when the <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/67235-122dec1016-action-groups-extended-250-action-groups-in-flight-editing-now-kosremotetech/\">Extended Action Groups mod</a> is installed.\n</param>\n</doc>",
                    },
                    Procedure {
                        name: "Control_AddNode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "prograde",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            },
                            Parameter {
                                name: "normal",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            },
                            Parameter {
                                name: "radial",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Node",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreates a maneuver node at the given universal time, and returns a\n<see cref=\"T:SpaceCenter.Node\" /> object that can be used to modify it.\nOptionally sets the magnitude of the delta-v for the maneuver node\nin the prograde, normal and radial directions.\n</summary>\n<param name=\"ut\">Universal time of the maneuver node.</param>\n<param name=\"prograde\">Delta-v in the prograde direction.</param>\n<param name=\"normal\">Delta-v in the normal direction.</param>\n<param name=\"radial\">Delta-v in the radial direction.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Control_RemoveNodes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove all maneuver nodes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ControlState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe control state of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Source",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ControlSource",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe source of the vessels control, for example by a kerbal or a probe core.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_SAS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SAS\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_SAS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SAS\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_SASMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "SASMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_SASMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "SpaceCenter",
                                        name: "SASMode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" /></remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_SpeedMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "SpeedMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SpeedMode\" /> of the navball.\nThis is the mode displayed next to the speed at the top of the navball.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_SpeedMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "SpaceCenter",
                                        name: "SpeedMode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SpeedMode\" /> of the navball.\nThis is the mode displayed next to the speed at the top of the navball.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_RCS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of RCS.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_RCS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of RCS.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_ReactionWheels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all reactive wheels on the vessel are active,\nand sets the active state of all reaction wheels.\nSee <see cref=\"M:SpaceCenter.ReactionWheel.Active\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_ReactionWheels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all reactive wheels on the vessel are active,\nand sets the active state of all reaction wheels.\nSee <see cref=\"M:SpaceCenter.ReactionWheel.Active\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Gear",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the landing gear/legs.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Gear",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the landing gear/legs.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Legs",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all landing legs on the vessel are deployed,\nand sets the deployment state of all landing legs.\nDoes not include wheels (for example landing gear).\nSee <see cref=\"M:SpaceCenter.Leg.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Legs",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all landing legs on the vessel are deployed,\nand sets the deployment state of all landing legs.\nDoes not include wheels (for example landing gear).\nSee <see cref=\"M:SpaceCenter.Leg.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Wheels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all wheels on the vessel are deployed,\nand sets the deployment state of all wheels.\nDoes not include landing legs.\nSee <see cref=\"M:SpaceCenter.Wheel.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Wheels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all wheels on the vessel are deployed,\nand sets the deployment state of all wheels.\nDoes not include landing legs.\nSee <see cref=\"M:SpaceCenter.Wheel.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Lights",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the lights.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Lights",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the lights.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Brakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the wheel brakes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Brakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the wheel brakes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Antennas",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all antennas on the vessel are deployed,\nand sets the deployment state of all antennas.\nSee <see cref=\"M:SpaceCenter.Antenna.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Antennas",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all antennas on the vessel are deployed,\nand sets the deployment state of all antennas.\nSee <see cref=\"M:SpaceCenter.Antenna.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_CargoBays",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether any of the cargo bays on the vessel are open,\nand sets the open state of all cargo bays.\nSee <see cref=\"M:SpaceCenter.CargoBay.Open\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_CargoBays",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether any of the cargo bays on the vessel are open,\nand sets the open state of all cargo bays.\nSee <see cref=\"M:SpaceCenter.CargoBay.Open\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Intakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all of the air intakes on the vessel are open,\nand sets the open state of all air intakes.\nSee <see cref=\"M:SpaceCenter.Intake.Open\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Intakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all of the air intakes on the vessel are open,\nand sets the open state of all air intakes.\nSee <see cref=\"M:SpaceCenter.Intake.Open\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Parachutes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all parachutes on the vessel are deployed,\nand sets the deployment state of all parachutes.\nCannot be set to <c>false</c>.\nSee <see cref=\"M:SpaceCenter.Parachute.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Parachutes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all parachutes on the vessel are deployed,\nand sets the deployment state of all parachutes.\nCannot be set to <c>false</c>.\nSee <see cref=\"M:SpaceCenter.Parachute.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Radiators",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all radiators on the vessel are deployed,\nand sets the deployment state of all radiators.\nSee <see cref=\"M:SpaceCenter.Radiator.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Radiators",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all radiators on the vessel are deployed,\nand sets the deployment state of all radiators.\nSee <see cref=\"M:SpaceCenter.Radiator.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_ResourceHarvesters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all of the resource harvesters on the vessel are deployed,\nand sets the deployment state of all resource harvesters.\nSee <see cref=\"M:SpaceCenter.ResourceHarvester.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_ResourceHarvesters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all of the resource harvesters on the vessel are deployed,\nand sets the deployment state of all resource harvesters.\nSee <see cref=\"M:SpaceCenter.ResourceHarvester.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_ResourceHarvestersActive",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether any of the resource harvesters on the vessel are active,\nand sets the active state of all resource harvesters.\nSee <see cref=\"M:SpaceCenter.ResourceHarvester.Active\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_ResourceHarvestersActive",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether any of the resource harvesters on the vessel are active,\nand sets the active state of all resource harvesters.\nSee <see cref=\"M:SpaceCenter.ResourceHarvester.Active\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_SolarPanels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all solar panels on the vessel are deployed,\nand sets the deployment state of all solar panels.\nSee <see cref=\"M:SpaceCenter.SolarPanel.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_SolarPanels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether all solar panels on the vessel are deployed,\nand sets the deployment state of all solar panels.\nSee <see cref=\"M:SpaceCenter.SolarPanel.Deployed\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Abort",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the abort action group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Abort",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the abort action group.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Throttle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the throttle. A value between 0 and 1.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Throttle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the throttle. A value between 0 and 1.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_InputMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ControlInputMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSets the behavior of the pitch, yaw, roll and translation control inputs.\nWhen set to additive, these inputs are added to the vessels current inputs.\nThis mode is the default.\nWhen set to override, these inputs (if non-zero) override the vessels inputs.\nThis mode prevents keyboard control, or SAS, from interfering with the controls when\nthey are set.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_InputMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "SpaceCenter",
                                        name: "ControlInputMode",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSets the behavior of the pitch, yaw, roll and translation control inputs.\nWhen set to additive, these inputs are added to the vessels current inputs.\nThis mode is the default.\nWhen set to override, these inputs (if non-zero) override the vessels inputs.\nThis mode prevents keyboard control, or SAS, from interfering with the controls when\nthey are set.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Pitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Pitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Yaw",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Yaw",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Roll",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Roll",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Forward",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Forward",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Up",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Up",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Right",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_Right",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_WheelThrottle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_WheelThrottle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_WheelSteering",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_WheelSteering",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_CurrentStage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current stage of the vessel. Corresponds to the stage number in\nthe in-game UI.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_StageLock",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether staging is locked on the vessel.\n</summary>\n<remarks>\nThis is equivalent to locking the staging using Alt+L\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_set_StageLock",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether staging is locked on the vessel.\n</summary>\n<remarks>\nThis is equivalent to locking the staging using Alt+L\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Control_get_Nodes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Control",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns a list of all existing maneuver nodes, ordered by time from first to last.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_set_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members name.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Type",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "CrewMemberType",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe type of crew member.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_OnMission",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the crew member is on a mission.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Courage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members courage.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_set_Courage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members courage.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Stupidity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members stupidity.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_set_Stupidity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members stupidity.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Experience",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members experience.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_set_Experience",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew members experience.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Badass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the crew member is a badass.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_set_Badass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the crew member is a badass.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_get_Veteran",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the crew member is a veteran.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CrewMember_set_Veteran",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the crew member is a veteran.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_SimulateAerodynamicForceAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "body",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "velocity",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSimulate and return the total aerodynamic forces acting on the vessel,\nif it where to be traveling with the given velocity at the given position in the\natmosphere of the given celestial body.\n</summary>\n<returns>A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_GForce",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current G force acting on the vessel in <math>g</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_MeanAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude above sea level, in meters.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_SurfaceAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude above the surface of the body or sea level, whichever is closer, in meters.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_BedrockAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Elevation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe elevation of the terrain under the vessel, in meters. This is the height of the terrain above sea level,\nand is negative when the vessel is over the sea.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Latitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Latitude\">latitude</a> of the vessel for the body being orbited, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Longitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Longitude\">longitude</a> of the vessel for the body being orbited, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Velocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe velocity of the vessel, in the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The velocity as a vector. The vector points in the direction of travel,\nand its magnitude is the speed of the vessel in meters per second.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed of the vessel in meters per second,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_HorizontalSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe horizontal speed of the vessel in meters per second,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_VerticalSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vertical speed of the vessel in meters per second,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_CenterOfMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the center of mass of the vessel,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" /></summary>\n<returns>The position as a vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rotation of the vessel, in the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" /></summary>\n<returns>The rotation as a quaternion of the form <math>(x, y, z, w)</math>.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Direction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction that the vessel is pointing in,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Pitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe pitch of the vessel relative to the horizon, in degrees.\nA value between -90° and +90°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Heading",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe heading of the vessel (its angle relative to north), in degrees.\nA value between 0° and 360°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Roll",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe roll of the vessel relative to the horizon, in degrees.\nA value between -180° and +180°.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Prograde",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe prograde direction of the vessels orbit,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Retrograde",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe retrograde direction of the vessels orbit,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Normal",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction normal to the vessels orbit,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_AntiNormal",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction opposite to the normal of the vessels orbit,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Radial",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe radial direction of the vessels orbit,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_AntiRadial",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction opposite to the radial direction of the vessels orbit,\nin the reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The direction as a unit vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_AtmosphereDensity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current density of the atmosphere around the vessel, in <math>kg/m^3</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_DynamicPressure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe dynamic pressure acting on the vessel, in Pascals. This is a measure of the\nstrength of the aerodynamic forces. It is equal to\n<math>\\frac{1}{2} . \\mbox{air density} . \\mbox{velocity}^2</math>.\nIt is commonly denoted <math>Q</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_StaticPressureAtMSL",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe static atmospheric pressure at mean sea level, in Pascals.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_StaticPressure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe static atmospheric pressure acting on the vessel, in Pascals.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_AerodynamicForce",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total aerodynamic forces acting on the vessel,\nin reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Lift",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Aerodynamic_force\">aerodynamic lift</a>\ncurrently acting on the vessel.\n</summary>\n<returns>A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Drag",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Aerodynamic_force\">aerodynamic drag</a> currently acting on the vessel.\n</summary>\n<returns>A vector pointing in the direction of the force, with its magnitude\nequal to the strength of the force in Newtons.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_SpeedOfSound",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed of sound, in the atmosphere around the vessel, in <math>m/s</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_Mach",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe speed of the vessel, in multiples of the speed of sound.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_ReynoldsNumber",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessels Reynolds number.\n</summary>\n<remarks>\nRequires <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_TrueAirSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/True_airspeed\">true air speed</a>\nof the vessel, in meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_EquivalentAirSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Equivalent_airspeed\">equivalent air speed</a>\nof the vessel, in meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_TerminalVelocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn estimate of the current terminal velocity of the vessel, in meters per second.\nThis is the speed at which the drag forces cancel out the force of gravity.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_AngleOfAttack",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe pitch angle between the orientation of the vessel and its velocity vector,\nin degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_SideslipAngle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe yaw angle between the orientation of the vessel and its velocity vector, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_TotalAirTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Total_air_temperature\">total air temperature</a>\nof the atmosphere around the vessel, in Kelvin.\nThis includes the <see cref=\"M:SpaceCenter.Flight.StaticAirTemperature\" /> and the vessel's kinetic energy.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_StaticAirTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Total_air_temperature\">static (ambient)\ntemperature</a> of the atmosphere around the vessel, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_StallFraction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of stall, between 0 and 1. A value greater than 0.005 indicates\na minor stall and a value greater than 0.5 indicates a large-scale stall.\n</summary>\n<remarks>\nRequires <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_DragCoefficient",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe coefficient of drag. This is the amount of drag produced by the vessel.\nIt depends on air speed, air density and wing area.\n</summary>\n<remarks>\nRequires <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_LiftCoefficient",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe coefficient of lift. This is the amount of lift produced by the vessel, and\ndepends on air speed, air density and wing area.\n</summary>\n<remarks>\nRequires <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_BallisticCoefficient",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Ballistic_coefficient\">ballistic coefficient</a>.\n</summary>\n<remarks>\nRequires <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Flight_get_ThrustSpecificFuelConsumption",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Flight",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thrust specific fuel consumption for the jet engines on the vessel. This is a\nmeasure of the efficiency of the engines, with a lower value indicating a more\nefficient vessel. This value is the number of Newtons of fuel that are burned,\nper hour, to produce one newton of thrust.\n</summary>\n<remarks>\nRequires <a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/19321-130-ferram-aerospace-research-v0159-liebe-82117/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Node_BurnVector",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the burn vector for the maneuver node.\n</summary>\n<param name=\"referenceFrame\">The reference frame that the returned vector is in.\nDefaults to <see cref=\"M:SpaceCenter.Vessel.OrbitalReferenceFrame\" />.</param>\n<returns>A vector whose direction is the direction of the maneuver node burn, and\nmagnitude is the delta-v of the burn in meters per second.\n</returns>\n<remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingBurnVector\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Node_RemainingBurnVector",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the remaining burn vector for the maneuver node.\n</summary>\n<param name=\"referenceFrame\">The reference frame that the returned vector is in.\nDefaults to <see cref=\"M:SpaceCenter.Vessel.OrbitalReferenceFrame\" />.</param>\n<returns>A vector whose direction is the direction of the maneuver node burn, and\nmagnitude is the delta-v of the burn in meters per second.\n</returns>\n<remarks>\nChanges as the maneuver node is executed. See <see cref=\"M:SpaceCenter.Node.BurnVector\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Node_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemoves the maneuver node.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position vector of the maneuver node in the given reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Node_Direction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction of the maneuver nodes burn.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_Prograde",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the prograde direction,\nin meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_set_Prograde",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the prograde direction,\nin meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_Normal",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the normal direction,\nin meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_set_Normal",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the normal direction,\nin meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_Radial",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the radial direction,\nin meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_set_Radial",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the radial direction,\nin meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_DeltaV",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe delta-v of the maneuver node, in meters per second.\n</summary>\n<remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingDeltaV\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Node_set_DeltaV",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe delta-v of the maneuver node, in meters per second.\n</summary>\n<remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingDeltaV\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_RemainingDeltaV",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGets the remaining delta-v of the maneuver node, in meters per second. Changes as the\nnode is executed. This is equivalent to the delta-v reported in-game.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_UT",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe universal time at which the maneuver will occur, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_set_UT",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe universal time at which the maneuver will occur, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_TimeTo",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time until the maneuver node will be encountered, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_Orbit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Orbit",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe orbit that results from executing the maneuver node.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the maneuver node's burn.\n<list type=\"bullet\"><item><description>The origin is at the position of the maneuver node.</description></item><item><description>The y-axis points in the direction of the burn.</description></item><item><description>The x-axis and z-axis point in arbitrary but fixed directions.</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Node_get_OrbitalReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Node",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the maneuver node, and\norientated with the orbital prograde/normal/radial directions of the\noriginal orbit at the maneuver node's position.\n<list type=\"bullet\"><item><description>The origin is at the position of the maneuver node.</description></item><item><description>The x-axis points in the orbital anti-radial direction of the original\norbit, at the position of the maneuver node.</description></item><item><description>The y-axis points in the orbital prograde direction of the original\norbit, at the position of the maneuver node.</description></item><item><description>The z-axis points in the orbital normal direction of the original orbit,\nat the position of the maneuver node.</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_static_ReferencePlaneNormal",
                        parameters: [
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction that is normal to the orbits reference plane,\nin the given reference frame.\nThe reference plane is the plane from which the orbits inclination is measured.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_static_ReferencePlaneDirection",
                        parameters: [
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction from which the orbits longitude of ascending node is measured,\nin the given reference frame.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_MeanAnomalyAtUT",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe mean anomaly at the given time.\n</summary>\n<param name=\"ut\">The universal time in seconds.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_RadiusAtTrueAnomaly",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "trueAnomaly",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe orbital radius at the point in the orbit given by the true anomaly.\n</summary>\n<param name=\"trueAnomaly\">The true anomaly.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_TrueAnomalyAtRadius",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "radius",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe true anomaly at the given orbital radius.\n</summary>\n<param name=\"radius\">The orbital radius in meters.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_TrueAnomalyAtUT",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe true anomaly at the given time.\n</summary>\n<param name=\"ut\">The universal time in seconds.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_UTAtTrueAnomaly",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "trueAnomaly",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe universal time, in seconds, corresponding to the given true anomaly.\n</summary>\n<param name=\"trueAnomaly\">True anomaly.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_EccentricAnomalyAtUT",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe eccentric anomaly at the given universal time.\n</summary>\n<param name=\"ut\">The universal time, in seconds.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_OrbitalSpeedAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "time",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe orbital speed at the given time, in meters per second.\n</summary>\n<param name=\"time\">Time from now, in seconds.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_RadiusAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe orbital radius at the given time, in meters.\n</summary>\n<param name=\"ut\">The universal time to measure the radius at.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_PositionAt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "ut",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at a given time, in the specified reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"ut\">The universal time to measure the position at.</param>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_TimeOfClosestApproach",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "target",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nEstimates and returns the time at closest approach to a target orbit.\n</summary>\n<returns>The universal time at closest approach, in seconds.</returns>\n<param name=\"target\">Target orbit.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_DistanceAtClosestApproach",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "target",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nEstimates and returns the distance at closest approach to a target orbit, in meters.\n</summary>\n<param name=\"target\">Target orbit.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_ListClosestApproaches",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "target",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "orbits",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the times at closest approach and corresponding distances, to a target orbit.\n</summary>\n<returns>\nA list of two lists.\nThe first is a list of times at closest approach, as universal times in seconds.\nThe second is a list of corresponding distances at closest approach, in meters.\n</returns>\n<param name=\"target\">Target orbit.</param>\n<param name=\"orbits\">The number of future orbits to search.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_TrueAnomalyAtAN",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "target",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe true anomaly of the ascending node with the given target orbit.\n</summary>\n<param name=\"target\">Target orbit.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_TrueAnomalyAtDN",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "target",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe true anomaly of the descending node with the given target orbit.\n</summary>\n<param name=\"target\">Target orbit.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_RelativeInclination",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "target",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRelative inclination of this orbit and the target orbit, in radians.\n</summary>\n<param name=\"target\">Target orbit.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Body",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body (e.g. planet or moon) around which the object is orbiting.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Apoapsis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGets the apoapsis of the orbit, in meters, from the center of mass\nof the body being orbited.\n</summary>\n<remarks>\nFor the apoapsis altitude reported on the in-game map view,\nuse <see cref=\"M:SpaceCenter.Orbit.ApoapsisAltitude\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Periapsis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe periapsis of the orbit, in meters, from the center of mass\nof the body being orbited.\n</summary>\n<remarks>\nFor the periapsis altitude reported on the in-game map view,\nuse <see cref=\"M:SpaceCenter.Orbit.PeriapsisAltitude\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_ApoapsisAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe apoapsis of the orbit, in meters, above the sea level of the body being orbited.\n</summary>\n<remarks>\nThis is equal to <see cref=\"M:SpaceCenter.Orbit.Apoapsis\" /> minus the equatorial radius of the body.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_PeriapsisAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe periapsis of the orbit, in meters, above the sea level of the body being orbited.\n</summary>\n<remarks>\nThis is equal to <see cref=\"M:SpaceCenter.Orbit.Periapsis\" /> minus the equatorial radius of the body.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_SemiMajorAxis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe semi-major axis of the orbit, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_SemiMinorAxis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe semi-minor axis of the orbit, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Radius",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current radius of the orbit, in meters. This is the distance between the center\nof mass of the object in orbit, and the center of mass of the body around which it\nis orbiting.\n</summary>\n<remarks>\nThis value will change over time if the orbit is elliptical.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current orbital speed of the object in meters per second.\n</summary>\n<remarks>\nThis value will change over time if the orbit is elliptical.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Period",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe orbital period, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_TimeToApoapsis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time until the object reaches apoapsis, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_TimeToPeriapsis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time until the object reaches periapsis, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Eccentricity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Orbital_eccentricity\">eccentricity</a>\nof the orbit.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Inclination",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Orbital_inclination\">inclination</a>\nof the orbit,\nin radians.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_LongitudeOfAscendingNode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Longitude_of_the_ascending_node\">longitude of\nthe ascending node</a>, in radians.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_ArgumentOfPeriapsis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Argument_of_periapsis\">argument of\nperiapsis</a>, in radians.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_MeanAnomalyAtEpoch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_Epoch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time since the epoch (the point at which the\n<a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch</a>\nwas measured, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_MeanAnomaly",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_EccentricAnomaly",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Eccentric_anomaly\">eccentric anomaly</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_TrueAnomaly",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/True_anomaly\">true anomaly</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_NextOrbit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Orbit",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIf the object is going to change sphere of influence in the future, returns the new\norbit after the change. Otherwise returns <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_TimeToSOIChange",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe time until the object changes sphere of influence, in seconds. Returns <c>NaN</c>\nif the object is not going to change sphere of influence.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Orbit_get_OrbitalSpeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Orbit",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current orbital speed in meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_Transmit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTransmit data.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_Cancel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCancel current transmission of data.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this antenna.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "AntennaState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the antenna.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Deployable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the antenna is deployable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the antenna is deployed.\n</summary>\n<remarks>\nFixed antennas are always deployed.\nReturns an error if you try to deploy a fixed antenna.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the antenna is deployed.\n</summary>\n<remarks>\nFixed antennas are always deployed.\nReturns an error if you try to deploy a fixed antenna.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_CanTransmit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether data can be transmitted by this antenna.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_AllowPartial",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether partial data transmission is permitted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_set_AllowPartial",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether partial data transmission is permitted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Power",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe power of the antenna.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_Combinable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the antenna can be combined with other antennae on the vessel\nto boost the power.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_CombinableExponent",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nExponent used to calculate the combined power of multiple antennae on a vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_PacketInterval",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nInterval between sending packets in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_PacketSize",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAmount of data sent per packet in Mits.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Antenna_get_PacketResourceCost",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nUnits of electric charge consumed per packet sent.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CargoBay_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CargoBay",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this cargo bay.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CargoBay_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CargoBay",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "CargoBayState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the cargo bay.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CargoBay_get_Open",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CargoBay",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the cargo bay is open.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "CargoBay_set_Open",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CargoBay",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the cargo bay is open.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this control surface.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_PitchEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has pitch control enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_set_PitchEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has pitch control enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_YawEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has yaw control enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_set_YawEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has yaw control enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_RollEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has roll control enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_set_RollEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has roll control enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_AuthorityLimiter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe authority limiter for the control surface, which controls how far the\ncontrol surface will move.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_set_AuthorityLimiter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe authority limiter for the control surface, which controls how far the\ncontrol surface will move.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_Inverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface movement is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_set_Inverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface movement is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has been fully deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the control surface has been fully deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_SurfaceArea",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSurface area of the control surface in <math>m^2</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ControlSurface_get_AvailableTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe available torque, in Newton meters, that can be produced by this control surface,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Decoupler_Decouple",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Decoupler",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFires the decoupler. Returns the new vessel created when the decoupler fires.\nThrows an exception if the decoupler has already fired.\n</summary>\n<remarks>\nWhen called, the active vessel may change. It is therefore possible that,\nafter calling this function, the object(s) returned by previous call(s) to\n<see cref=\"M:SpaceCenter.ActiveVessel\" /> no longer refer to the active vessel.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Decoupler_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Decoupler",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this decoupler.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Decoupler_get_Decoupled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Decoupler",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the decoupler has fired.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Decoupler_get_Staged",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Decoupler",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the decoupler is enabled in the staging sequence.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Decoupler_get_Impulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Decoupler",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe impulse that the decoupler imparts when it is fired, in Newton seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_Undock",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nUndocks the docking port and returns the new <see cref=\"T:SpaceCenter.Vessel\" /> that is created.\nThis method can be called for either docking port in a docked pair.\nThrows an exception if the docking port is not docked to anything.\n</summary>\n<remarks>\nWhen called, the active vessel may change. It is therefore possible that,\nafter calling this function, the object(s) returned by previous call(s) to\n<see cref=\"M:SpaceCenter.ActiveVessel\" /> no longer refer to the active vessel.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the docking port, in the given reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_Direction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction that docking port points in, in the given reference frame.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rotation of the docking port, in the given reference frame.\n</summary>\n<returns>The rotation as a quaternion of the form <math>(x, y, z, w)</math>.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nrotation is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this docking port.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "DockingPortState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the docking port.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_DockedPart",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part that this docking port is docked to. Returns <c>null</c> if this\ndocking port is not docked to anything.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_ReengageDistance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe distance a docking port must move away when it undocks before it\nbecomes ready to dock with another port, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_HasShield",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the docking port has a shield.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_Shielded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the docking ports shield, if it has one.\n\nReturns <c>true</c> if the docking port has a shield, and the shield is\nclosed. Otherwise returns <c>false</c>. When set to <c>true</c>, the shield is\nclosed, and when set to <c>false</c> the shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_set_Shielded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the docking ports shield, if it has one.\n\nReturns <c>true</c> if the docking port has a shield, and the shield is\nclosed. Otherwise returns <c>false</c>. When set to <c>true</c>, the shield is\nclosed, and when set to <c>false</c> the shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "DockingPort_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to this docking port, and\noriented with the port.\n<list type=\"bullet\"><item><description>The origin is at the position of the docking port.\n</description></item><item><description>The axes rotate with the docking port.</description></item><item><description>The x-axis points out to the right side of the docking port.\n</description></item><item><description>The y-axis points in the direction the docking port is facing.\n</description></item><item><description>The z-axis points out of the bottom off the docking port.\n</description></item></list></summary>\n<remarks>\nThis reference frame is not necessarily equivalent to the reference frame\nfor the part, returned by <see cref=\"M:SpaceCenter.Part.ReferenceFrame\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_ToggleMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nToggle the current engine mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this engine.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on <see cref=\"M:SpaceCenter.Engine.CanShutdown\" /> and <see cref=\"M:SpaceCenter.Engine.CanRestart\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_set_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on <see cref=\"M:SpaceCenter.Engine.CanShutdown\" /> and <see cref=\"M:SpaceCenter.Engine.CanRestart\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Thrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of thrust being produced by the engine, in Newtons.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_AvailableThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and with its throttle set to 100%.\nReturns zero if the engine does not have any fuel.\nTakes the engine's current <see cref=\"M:SpaceCenter.Engine.ThrustLimit\" /> and atmospheric conditions\ninto account.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_MaxThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and fueled, with its throttle and throttle limiter set to 100%.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_MaxVacuumThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum amount of thrust that can be produced by the engine in a\nvacuum, in Newtons. This is the amount of thrust produced by the engine\nwhen activated, <see cref=\"M:SpaceCenter.Engine.ThrustLimit\" /> is set to 100%, the main\nvessel's throttle is set to 100% and the engine is in a vacuum.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_ThrustLimit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_set_ThrustLimit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Thrusters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe components of the engine that generate thrust.\n</summary>\n<remarks>\nFor example, this corresponds to the rocket nozzel on a solid rocket booster,\nor the individual nozzels on a RAPIER engine.\nThe overall thrust produced by the engine, as reported by <see cref=\"M:SpaceCenter.Engine.AvailableThrust\" />,\n<see cref=\"M:SpaceCenter.Engine.MaxThrust\" /> and others, is the sum of the thrust generated by each thruster.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_SpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current specific impulse of the engine, in seconds. Returns zero\nif the engine is not active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_VacuumSpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vacuum specific impulse of the engine, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_KerbinSeaLevelSpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe specific impulse of the engine at sea level on Kerbin, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_PropellantNames",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe names of the propellants that the engine consumes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Propellants",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe propellants that the engine consumes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_PropellantRatios",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Dictionary,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe ratio of resources that the engine consumes. A dictionary mapping resource names\nto the ratio at which they are consumed by the engine.\n</summary>\n<remarks>\nFor example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every\n0.6 units of LiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_HasFuel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine has any fuel available.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Throttle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current throttle setting for the engine. A value between 0 and 1.\nThis is not necessarily the same as the vessel's main throttle\nsetting, as some engines take time to adjust their throttle\n(such as jet engines).\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_ThrottleLocked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the <see cref=\"M:SpaceCenter.Control.Throttle\" /> affects the engine. For example,\nthis is <c>true</c> for liquid fueled rockets, and <c>false</c> for solid rocket\nboosters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_CanRestart",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine can be restarted once shutdown. If the engine cannot be shutdown,\nreturns <c>false</c>. For example, this is <c>true</c> for liquid fueled rockets\nand <c>false</c> for solid rocket boosters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_CanShutdown",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine can be shutdown once activated. For example, this is\n<c>true</c> for liquid fueled rockets and <c>false</c> for solid rocket boosters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_HasModes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine has multiple modes of operation.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Mode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the current engine mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_set_Mode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the current engine mode.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Modes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Dictionary,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe available modes for the engine.\nA dictionary mapping mode names to <see cref=\"T:SpaceCenter.Engine\" /> objects.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_AutoModeSwitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine will automatically switch modes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_set_AutoModeSwitch",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine will automatically switch modes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_Gimballed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engine is gimballed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_GimbalRange",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe range over which the gimbal can move, in degrees.\nReturns 0 if the engine is not gimballed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_GimbalLocked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_set_GimbalLocked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_GimbalLimit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_set_GimbalLimit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Engine_get_AvailableTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe available torque, in Newton meters, that can be produced by this engine,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the engine is inactive, or not gimballed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_Run",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRun the experiment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_Transmit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTransmit all experimental data contained by this part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_Dump",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDump the experimental data contained by the experiment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_Reset",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReset the experiment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this experiment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nInternal name of the experiment, as used in\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation\">part cfg files</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Title",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTitle of the experiment, as shown on the in-game UI.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Inoperable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the experiment is inoperable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the experiment has been deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Rerunnable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the experiment can be re-run.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_HasData",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the experiment contains data.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Data",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceData",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe data contained in this experiment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Available",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDetermines if the experiment is available given the current conditions.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_Biome",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the biome the experiment is currently in.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Experiment_get_ScienceSubject",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ScienceSubject",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nContaining information on the corresponding specific science result for the current\nconditions. Returns <c>null</c> if the experiment is unavailable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Fairing_Jettison",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Fairing",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nJettison the fairing. Has no effect if it has already been jettisoned.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Fairing_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Fairing",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this fairing.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Fairing_get_Jettisoned",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Fairing",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the fairing has been jettisoned.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Force_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the force.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Force_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part that this force is applied to.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Force_get_ForceVector",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe force vector, in Newtons.\n</summary>\n<returns>A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Force_set_ForceVector",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe force vector, in Newtons.\n</summary>\n<returns>A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Force_get_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at which the force acts, in reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The position as a vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Force_set_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at which the force acts, in reference frame <see cref=\"T:SpaceCenter.ReferenceFrame\" />.\n</summary>\n<returns>The position as a vector.</returns>\n</doc>",
                    },
                    Procedure {
                        name: "Force_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame of the force vector and position.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Force_set_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Force",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame of the force vector and position.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Intake_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this intake.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Intake_get_Open",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the intake is open.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Intake_set_Open",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the intake is open.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Intake_get_Speed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSpeed of the flow into the intake, in <math>m/s</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Intake_get_Flow",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate of flow into the intake, in units of resource per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Intake_get_Area",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe area of the intake's opening, in square meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "LaunchClamp_Release",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "LaunchClamp",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReleases the docking clamp. Has no effect if the clamp has already been released.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "LaunchClamp_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "LaunchClamp",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this launch clamp.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Leg_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this landing leg.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Leg_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "LegState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the landing leg.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Leg_get_Deployable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the leg is deployable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Leg_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the landing leg is deployed.\n</summary>\n<remarks>\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Leg_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the landing leg is deployed.\n</summary>\n<remarks>\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Leg_get_IsGrounded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns whether the leg is touching the ground.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Light_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this light.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Light_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the light is switched on.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Light_set_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the light is switched on.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Light_get_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe color of the light, as an RGB triple.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Light_set_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Float,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Float,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Float,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe color of the light, as an RGB triple.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Light_get_PowerUsage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current power usage, in units of charge per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Module_HasField",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns <c>true</c> if the module has a field with the given name.\n</summary>\n<param name=\"name\">Name of the field.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_GetField",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the value of a field.\n</summary>\n<param name=\"name\">Name of the field.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_SetFieldInt",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the value of a field to the given integer number.\n</summary>\n<param name=\"name\">Name of the field.</param>\n<param name=\"value\">Value to set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_SetFieldFloat",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the value of a field to the given floating point number.\n</summary>\n<param name=\"name\">Name of the field.</param>\n<param name=\"value\">Value to set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_SetFieldString",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the value of a field to the given string.\n</summary>\n<param name=\"name\">Name of the field.</param>\n<param name=\"value\">Value to set.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_ResetField",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the value of a field to its original value.\n</summary>\n<param name=\"name\">Name of the field.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_HasEvent",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if the module has an event with the given name.\n</summary>\n<param name=\"name\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_TriggerEvent",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTrigger the named event. Equivalent to clicking the button in the right-click menu\nof the part.\n</summary>\n<param name=\"name\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_HasAction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if the part has an action with the given name.\n</summary>\n<param name=\"name\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_SetAction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the value of an action with the given name.\n</summary>\n<param name=\"name\"></param>\n<param name=\"value\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Module_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nName of the PartModule. For example, \"ModuleEngines\".\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Module_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part that contains this module.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Module_get_Fields",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Dictionary,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe modules field names and their associated values, as a dictionary.\nThese are the values visible in the right-click menu of the part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Module_get_Events",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of the names of all of the modules events. Events are the clickable buttons\nvisible in the right-click menu of the part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Module_get_Actions",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all the names of the modules actions. These are the parts actions that can\nbe assigned to action groups in the in-game editor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_Deploy",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDeploys the parachute. This has no effect if the parachute has already\nbeen deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_Arm",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDeploys the parachute. This has no effect if the parachute has already\nbeen armed or deployed. Only applicable to RealChutes parachutes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this parachute.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the parachute has been deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_get_Armed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the parachute has been armed or deployed. Only applicable to\nRealChutes parachutes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ParachuteState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the parachute.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_get_DeployAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude at which the parachute will full deploy, in meters.\nOnly applicable to stock parachutes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_set_DeployAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude at which the parachute will full deploy, in meters.\nOnly applicable to stock parachutes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_get_DeployMinPressure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\nOnly applicable to stock parachutes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parachute_set_DeployMinPressure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\nOnly applicable to stock parachutes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the part in the given reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n<remarks>\nThis is a fixed position in the part, defined by the parts model.\nIt s not necessarily the same as the parts center of mass.\nUse <see cref=\"M:SpaceCenter.Part.CenterOfMass\" /> to get the parts center of mass.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_CenterOfMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the parts center of mass in the given reference frame.\nIf the part is physicsless, this is equivalent to <see cref=\"M:SpaceCenter.Part.Position\" />.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Part_BoundingBox",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe axis-aligned bounding box of the part in the given reference frame.\n</summary>\n<returns>The positions of the minimum and maximum vertices of the box,\nas position vectors.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vectors are in.</param>\n<remarks>\nThis is computed from the collision mesh of the part.\nIf the part is not collidable, the box has zero volume and is centered on\nthe <see cref=\"M:SpaceCenter.Part.Position\" /> of the part.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_Direction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction the part points in, in the given reference frame.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Part_Velocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe linear velocity of the part in the given reference frame.\n</summary>\n<returns>The velocity as a vector. The vector points in the direction of travel,\nand its magnitude is the speed of the body in meters per second.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nvelocity vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Part_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rotation of the part, in the given reference frame.\n</summary>\n<returns>The rotation as a quaternion of the form <math>(x, y, z, w)</math>.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nrotation is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Part_AddForce",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "force",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Force",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nExert a constant force on the part, acting at the given position.\n</summary>\n<returns>An object that can be used to remove or modify the force.</returns>\n<param name=\"force\">A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</param>\n<param name=\"position\">The position at which the force acts, as a vector.</param>\n<param name=\"referenceFrame\">The reference frame that the\nforce and position are in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Part_InstantaneousForce",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "force",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nExert an instantaneous force on the part, acting at the given position.\n</summary>\n<param name=\"force\">A vector pointing in the direction that the force acts,\nwith its magnitude equal to the strength of the force in Newtons.</param>\n<param name=\"position\">The position at which the force acts, as a vector.</param>\n<param name=\"referenceFrame\">The reference frame that the\nforce and position are in.</param>\n<remarks>The force is applied instantaneously in a single physics update.</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nInternal name of the part, as used in\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation\">part cfg files</a>.\nFor example \"Mark1-2Pod\".\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Title",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTitle of the part, as shown when the part is right clicked in-game. For example \"Mk1-2 Command Pod\".\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Tag",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name tag for the part. Can be set to a custom string using the\nin-game user interface.\n</summary>\n<remarks>\nThis string is shared with\n<a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/61827-/\">kOS</a>\nif it is installed.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_set_Tag",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name tag for the part. Can be set to a custom string using the\nin-game user interface.\n</summary>\n<remarks>\nThis string is shared with\n<a href=\"https://forum.kerbalspaceprogram.com/index.php?/topic/61827-/\">kOS</a>\nif it is installed.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Highlighted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the part is highlighted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_set_Highlighted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the part is highlighted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_HighlightColor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe color used to highlight the part, as an RGB triple.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_set_HighlightColor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe color used to highlight the part, as an RGB triple.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Cost",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe cost of the part, in units of funds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Vessel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Vessel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessel that contains this part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Parent",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe parts parent. Returns <c>null</c> if the part does not have a parent.\nThis, in combination with <see cref=\"M:SpaceCenter.Part.Children\" />, can be used to traverse the vessels\nparts tree.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Children",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe parts children. Returns an empty list if the part has no children.\nThis, in combination with <see cref=\"M:SpaceCenter.Part.Parent\" />, can be used to traverse the vessels\nparts tree.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_AxiallyAttached",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the part is axially attached to its parent, i.e. on the top\nor bottom of its parent. If the part has no parent, returns <c>false</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_RadiallyAttached",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the part is radially attached to its parent, i.e. on the side of its parent.\nIf the part has no parent, returns <c>false</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Stage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe stage in which this part will be activated. Returns -1 if the part is not\nactivated by staging.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_DecoupleStage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe stage in which this part will be decoupled. Returns -1 if the part is never\ndecoupled from the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Massless",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the part is\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/Massless_part\">massless</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Mass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current mass of the part, including resources it contains, in kilograms.\nReturns zero if the part is massless.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_DryMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe mass of the part, not including any resources it contains, in kilograms.\nReturns zero if the part is massless.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Shielded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the part is shielded from the exterior of the vessel, for example by a fairing.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_DynamicPressure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe dynamic pressure acting on the part, in Pascals.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ImpactTolerance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe impact tolerance of the part, in meters per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Temperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTemperature of the part, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_SkinTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTemperature of the skin of the part, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_MaxTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaximum temperature that the part can survive, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_MaxSkinTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMaximum temperature that the skin of the part can survive, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA measure of how much energy it takes to increase the internal temperature of the part,\nin Joules per Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalSkinMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA measure of how much energy it takes to increase the skin temperature of the part,\nin Joules per Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalResourceMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA measure of how much energy it takes to increase the temperature of the resources\ncontained in the part, in Joules per Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalInternalFlux",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate at which heat energy is begin generated by the part.\nFor example, some engines generate heat by combusting fuel.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing\nheat energy.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalConductionFlux",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate at which heat energy is conducting into or out of the part via contact with\nother parts. Measured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is\nlosing heat energy.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalConvectionFlux",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate at which heat energy is convecting into or out of the part from the\nsurrounding atmosphere. Measured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is\nlosing heat energy.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalRadiationFlux",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate at which heat energy is radiating into or out of the part from the surrounding\nenvironment. Measured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is\nlosing heat energy.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ThermalSkinToInternalFlux",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate at which heat energy is transferring between the part's skin and its internals.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part's internals are gaining heat energy,\nand negative means its skin is gaining heat energy.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Resources",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Resources",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Resources\" /> object for the part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Crossfeed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether this part is crossfeed capable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_IsFuelLine",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether this part is a fuel line.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_FuelLinesFrom",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe parts that are connected to this part via fuel lines, where the direction of the\nfuel line is into this part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_FuelLinesTo",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe parts that are connected to this part via fuel lines, where the direction of the\nfuel line is out of this part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Modules",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe modules for this part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Antenna",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Antenna",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Antenna\" /> if the part is an antenna, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_CargoBay",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CargoBay",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.CargoBay\" /> if the part is a cargo bay, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ControlSurface",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ControlSurface",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ControlSurface\" /> if the part is an aerodynamic control surface,\notherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Decoupler",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Decoupler",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Decoupler\" /> if the part is a decoupler, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_DockingPort",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "DockingPort",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.DockingPort\" /> if the part is a docking port, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Engine",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Engine",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.Engine\" /> if the part is an engine, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Experiment",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Experiment",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.Experiment\" /> if the part contains a\nsingle science experiment, otherwise <c>null</c>.\n</summary>\n<remarks>\nThrows an exception if the part contains more than one experiment.\nIn that case, use <see cref=\"M:SpaceCenter.Part.Experiments\" /> to get the list of experiments in the part.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Experiments",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of <see cref=\"T:SpaceCenter.Experiment\" /> objects that the part contains.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Fairing",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Fairing",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Fairing\" /> if the part is a fairing, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Intake",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Intake",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.Intake\" /> if the part is an intake, otherwise <c>null</c>.\n</summary>\n<remarks>\nThis includes any part that generates thrust. This covers many different types\nof engine, including liquid fuel rockets, solid rocket boosters and jet engines.\nFor RCS thrusters see <see cref=\"T:SpaceCenter.RCS\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Leg",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Leg",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Leg\" /> if the part is a landing leg, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_LaunchClamp",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "LaunchClamp",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.LaunchClamp\" /> if the part is a launch clamp, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Light",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Light",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Light\" /> if the part is a light, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Parachute",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Parachute",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Parachute\" /> if the part is a parachute, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Radiator",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Radiator",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Radiator\" /> if the part is a radiator, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_RCS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "RCS",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.RCS\" /> if the part is an RCS block/thruster, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ReactionWheel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReactionWheel",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ReactionWheel\" /> if the part is a reaction wheel, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ResourceConverter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ResourceConverter",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ResourceConverter\" /> if the part is a resource converter,\notherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ResourceHarvester",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ResourceHarvester",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ResourceHarvester\" /> if the part is a resource harvester,\notherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_RoboticController",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "RoboticController",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.RoboticController\" /> if the part is a robotic controller,\notherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Sensor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Sensor",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Sensor\" /> if the part is a sensor, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_SolarPanel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "SolarPanel",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.SolarPanel\" /> if the part is a solar panel, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_Wheel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Wheel",
                                types: [],
                            },
                        ),
                        return_is_nullable: true,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Wheel\" /> if the part is a wheel, otherwise <c>null</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_MomentOfInertia",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe moment of inertia of the part in <math>kg.m^2</math> around its center of mass\nin the parts reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_InertiaTensor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe inertia tensor of the part in the parts reference frame\n(<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nReturns the 3x3 matrix as a list of elements, in row-major order.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to this part, and centered on a fixed\nposition within the part, defined by the parts model.\n<list type=\"bullet\"><item><description>The origin is at the position of the part, as returned by\n<see cref=\"M:SpaceCenter.Part.Position\" />.</description></item><item><description>The axes rotate with the part.</description></item><item><description>The x, y and z axis directions depend on the design of the part.\n</description></item></list></summary>\n<remarks>\nFor docking port parts, this reference frame is not necessarily equivalent to the\nreference frame for the docking port, returned by\n<see cref=\"M:SpaceCenter.DockingPort.ReferenceFrame\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Part_get_CenterOfMassReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to this part, and centered on its\ncenter of mass.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the part, as returned by\n<see cref=\"M:SpaceCenter.Part.CenterOfMass\" />.</description></item><item><description>The axes rotate with the part.</description></item><item><description>The x, y and z axis directions depend on the design of the part.\n</description></item></list></summary>\n<remarks>\nFor docking port parts, this reference frame is not necessarily equivalent to the\nreference frame for the docking port, returned by\n<see cref=\"M:SpaceCenter.DockingPort.ReferenceFrame\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_WithName",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of parts whose <see cref=\"M:SpaceCenter.Part.Name\" /> is <paramref name=\"name\" />.\n</summary>\n<param name=\"name\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_WithTitle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "title",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all parts whose <see cref=\"M:SpaceCenter.Part.Title\" /> is <paramref name=\"title\" />.\n</summary>\n<param name=\"title\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_WithTag",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "tag",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all parts whose <see cref=\"M:SpaceCenter.Part.Tag\" /> is <paramref name=\"tag\" />.\n</summary>\n<param name=\"tag\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_WithModule",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "moduleName",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all parts that contain a <see cref=\"T:SpaceCenter.Module\" /> whose\n<see cref=\"M:SpaceCenter.Module.Name\" /> is <paramref name=\"moduleName\" />.\n</summary>\n<param name=\"moduleName\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_InStage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "stage",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all parts that are activated in the given <paramref name=\"stage\" />.\n</summary>\n<param name=\"stage\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_InDecoupleStage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "stage",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all parts that are decoupled in the given <paramref name=\"stage\" />.\n</summary>\n<param name=\"stage\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_ModulesWithName",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "moduleName",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Module",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of modules (combined across all parts in the vessel) whose\n<see cref=\"M:SpaceCenter.Module.Name\" /> is <paramref name=\"moduleName\" />.\n</summary>\n<param name=\"moduleName\"></param>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_All",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all of the vessels parts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Root",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vessels root part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Controlling",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part from which the vessel is controlled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_set_Controlling",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part from which the vessel is controlled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Antennas",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Antenna",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all antennas in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_ControlSurfaces",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ControlSurface",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all control surfaces in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_CargoBays",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CargoBay",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all cargo bays in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Decouplers",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Decoupler",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all decouplers in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_DockingPorts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "DockingPort",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all docking ports in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Engines",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Engine",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all engines in the vessel.\n</summary>\n<remarks>\nThis includes any part that generates thrust. This covers many different types\nof engine, including liquid fuel rockets, solid rocket boosters, jet engines and\nRCS thrusters.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Experiments",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Experiment",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all science experiments in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Fairings",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Fairing",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all fairings in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Intakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Intake",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all intakes in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Legs",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Leg",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all landing legs attached to the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_LaunchClamps",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "LaunchClamp",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all launch clamps attached to the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Lights",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Light",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all lights in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Parachutes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parachute",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all parachutes in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Radiators",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Radiator",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all radiators in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_RCS",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all RCS blocks/thrusters in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_ReactionWheels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all reaction wheels in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_ResourceConverters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all resource converters in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_ResourceHarvesters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all resource harvesters in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Sensors",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Sensor",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all sensors in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_SolarPanels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all solar panels in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Parts_get_Wheels",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Parts",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all wheels in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the propellant.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_CurrentAmount",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of propellant.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_CurrentRequirement",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe required amount of propellant.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_TotalResourceAvailable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total amount of the underlying resource currently reachable given\nresource flow rules.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_TotalResourceCapacity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total vehicle capacity for the underlying propellant resource,\nrestricted by resource flow rules.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_IgnoreForIsp",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIf this propellant should be ignored when calculating required mass flow\ngiven specific impulse.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_IgnoreForThrustCurve",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIf this propellant should be ignored for thrust curve calculations.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_DrawStackGauge",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIf this propellant has a stack gauge or not.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_IsDeprived",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nIf this propellant is deprived.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Propellant_get_Ratio",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Propellant",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe propellant ratio.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this RCS.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thrusters are active.\nAn RCS thruster is inactive if the RCS action group is disabled\n(<see cref=\"M:SpaceCenter.Control.RCS\" />), the RCS thruster itself is not enabled\n(<see cref=\"M:SpaceCenter.RCS.Enabled\" />) or it is covered by a fairing (<see cref=\"M:SpaceCenter.Part.Shielded\" />).\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_Enabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thrusters are enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_Enabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thrusters are enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_PitchEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_PitchEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_YawEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_YawEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_RollEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_RollEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_ForwardEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_ForwardEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_UpEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_UpEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_RightEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_RightEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_AvailableTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe available torque, in Newton meters, that can be produced by this RCS,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if RCS is disable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_AvailableThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe amount of thrust, in Newtons, that would be produced by the thruster when activated.\nReturns zero if the thruster does not have any fuel.\nTakes the thrusters current <see cref=\"M:SpaceCenter.RCS.ThrustLimit\" /> and atmospheric conditions\ninto account.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_MaxThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum amount of thrust that can be produced by the RCS thrusters when active,\nin Newtons.\nTakes the thrusters current <see cref=\"M:SpaceCenter.RCS.ThrustLimit\" /> and atmospheric conditions\ninto account.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_MaxVacuumThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum amount of thrust that can be produced by the RCS thrusters when active\nin a vacuum, in Newtons.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_ThrustLimit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thrust limiter of the thruster. A value between 0 and 1.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_set_ThrustLimit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thrust limiter of the thruster. A value between 0 and 1.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_Thrusters",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of thrusters, one of each nozzel in the RCS part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_SpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current specific impulse of the RCS, in seconds. Returns zero\nif the RCS is not active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_VacuumSpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe vacuum specific impulse of the RCS, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_KerbinSeaLevelSpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe specific impulse of the RCS at sea level on Kerbin, in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_Propellants",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe names of resources that the RCS consumes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_PropellantRatios",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Dictionary,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe ratios of resources that the RCS consumes. A dictionary mapping resource names\nto the ratios at which they are consumed by the RCS.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RCS_get_HasFuel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RCS",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the RCS has fuel available.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Radiator_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Radiator",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this radiator.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Radiator_get_Deployable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Radiator",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the radiator is deployable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Radiator_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Radiator",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFor a deployable radiator, <c>true</c> if the radiator is extended.\nIf the radiator is not deployable, this is always <c>true</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Radiator_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Radiator",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFor a deployable radiator, <c>true</c> if the radiator is extended.\nIf the radiator is not deployable, this is always <c>true</c>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Radiator_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Radiator",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "RadiatorState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the radiator.\n</summary>\n<remarks>\nA fixed radiator is always <see cref=\"M:SpaceCenter.RadiatorState.Extended\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "ReactionWheel_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this reaction wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ReactionWheel_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the reaction wheel is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ReactionWheel_set_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the reaction wheel is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ReactionWheel_get_Broken",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the reaction wheel is broken.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ReactionWheel_get_AvailableTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe available torque, in Newton meters, that can be produced by this reaction wheel,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the reaction wheel is inactive or broken.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ReactionWheel_get_MaxTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReactionWheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque, in Newton meters, that can be produced by this reaction wheel,\nwhen it is active, in the positive and negative pitch, roll and yaw axes of the vessel.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTrue if the specified converter is active.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_Start",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_Stop",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStop the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ResourceConverterState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_StatusInfo",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStatus information for the specified converter.\nThis is the full status message shown in the in-game UI.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_Inputs",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nList of the names of resources consumed by the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_Outputs",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "index",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nList of the names of resources produced by the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this converter.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_get_Count",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe number of converters in the part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_get_ThermalEfficiency",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thermal efficiency of the converter, as a percentage of its maximum.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_get_CoreTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe core temperature of the converter, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceConverter_get_OptimumCoreTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceConverter",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe core temperature at which the converter will operate with peak efficiency, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this harvester.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ResourceHarvesterState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe state of the harvester.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the harvester is deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the harvester is deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the harvester is actively drilling.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_set_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the harvester is actively drilling.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_ExtractionRate",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rate at which the drill is extracting ore, in units per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_ThermalEfficiency",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe thermal efficiency of the drill, as a percentage of its maximum.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_CoreTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe core temperature of the drill, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceHarvester_get_OptimumCoreTemperature",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceHarvester",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe core temperature at which the drill will operate with peak efficiency, in Kelvin.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RoboticController_HasPart",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RoboticController",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "part",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the controller any axisfield from the part\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RoboticController_ListAxes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RoboticController",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: List,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: String,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nList the axes for the controller.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RoboticController_AddKey",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RoboticController",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "part",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "field",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "time",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd key frame value for controller axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RoboticController_ClearAxis",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RoboticController",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "part",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "field",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nClear axis.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RoboticController_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "RoboticController",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this antenna.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceData_get_DataAmount",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceData",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nData amount.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceData_get_ScienceValue",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceData",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nScience value.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceData_get_TransmitValue",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceData",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTransmit value.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_Science",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAmount of science already earned from this subject, not updated until after\ntransmission/recovery.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_ScienceCap",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTotal science allowable for this subject.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_IsComplete",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the experiment has been completed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_DataScale",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMultiply science value by this to determine data amount in mits.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_ScientificValue",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDiminishing value multiplier for decreasing the science value returned from repeated\nexperiments.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_SubjectValue",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nMultiplier for specific Celestial Body/Experiment Situation combination.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ScienceSubject_get_Title",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ScienceSubject",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nTitle of science subject, displayed in science archives\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Sensor_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Sensor",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this sensor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Sensor_get_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Sensor",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the sensor is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Sensor_set_Active",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Sensor",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the sensor is active.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Sensor_get_Value",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Sensor",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current value of the sensor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this solar panel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_get_Deployable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the solar panel is deployable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the solar panel is extended.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the solar panel is extended.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "SolarPanelState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the solar panel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_get_EnergyFlow",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of energy being generated by the solar panel, in\nunits of charge per second.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "SolarPanel_get_SunExposure",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "SolarPanel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current amount of sunlight that is incident on the solar panel,\nas a percentage. A value between 0 and 1.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_ThrustPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at which the thruster generates thrust, in the given reference frame.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_ThrustDirection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction of the force generated by the thruster, in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_InitialThrustPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position at which the thruster generates thrust, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n<remarks>\nThis position can move when the gimbal rotates. This is because the thrust position and\ngimbal position are not necessarily the same.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_InitialThrustDirection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction of the force generated by the thruster, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_GimbalPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition around which the gimbal pivots.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe <see cref=\"T:SpaceCenter.Part\" /> that contains this thruster.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_get_ThrustReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA reference frame that is fixed relative to the thruster and orientated with\nits thrust direction (<see cref=\"M:SpaceCenter.Thruster.ThrustDirection\" />).\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n<list type=\"bullet\"><item><description>\nThe origin is at the position of thrust for this thruster\n(<see cref=\"M:SpaceCenter.Thruster.ThrustPosition\" />).</description></item><item><description>\nThe axes rotate with the thrust direction.\nThis is the direction in which the thruster expels propellant, including any gimballing.\n</description></item><item><description>The y-axis points along the thrust direction.</description></item><item><description>The x-axis and z-axis are perpendicular to the thrust direction.\n</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_get_Gimballed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the thruster is gimballed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Thruster_get_GimbalAngle",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Thruster",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current gimbal angle in the pitch, roll and yaw axes, in degrees.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part object for this wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_State",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "WheelState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current state of the wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Radius",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRadius of the wheel, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Grounded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is touching the ground.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_HasBrakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel has brakes.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Brakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe braking force, as a percentage of maximum, when the brakes are applied.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_Brakes",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe braking force, as a percentage of maximum, when the brakes are applied.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_AutoFrictionControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether automatic friction control is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_AutoFrictionControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether automatic friction control is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_ManualFrictionControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nManual friction control value. Only has an effect if automatic friction control is disabled.\nA value between 0 and 5 inclusive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_ManualFrictionControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nManual friction control value. Only has an effect if automatic friction control is disabled.\nA value between 0 and 5 inclusive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Deployable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is deployable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_Deployed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is deployed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Powered",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is powered by a motor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_MotorEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the motor is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_MotorEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the motor is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_MotorInverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the direction of the motor is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_MotorInverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the direction of the motor is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_MotorState",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "MotorState",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the direction of the motor is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_MotorOutput",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe output of the motor. This is the torque currently being generated, in Newton meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_TractionControlEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether automatic traction control is enabled.\nA wheel only has traction control if it is powered.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_TractionControlEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether automatic traction control is enabled.\nA wheel only has traction control if it is powered.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_TractionControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSetting for the traction control.\nOnly takes effect if the wheel has automatic traction control enabled.\nA value between 0 and 5 inclusive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_TractionControl",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSetting for the traction control.\nOnly takes effect if the wheel has automatic traction control enabled.\nA value between 0 and 5 inclusive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_DriveLimiter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nManual setting for the motor limiter.\nOnly takes effect if the wheel has automatic traction control disabled.\nA value between 0 and 100 inclusive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_DriveLimiter",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nManual setting for the motor limiter.\nOnly takes effect if the wheel has automatic traction control disabled.\nA value between 0 and 100 inclusive.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Steerable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel has steering.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_SteeringEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel steering is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_SteeringEnabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel steering is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_SteeringInverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel steering is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_set_SteeringInverted",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel steering is inverted.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_HasSuspension",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel has suspension.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_SuspensionSpringStrength",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSuspension spring strength, as set in the editor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_SuspensionDamperStrength",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSuspension damper strength, as set in the editor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Broken",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is broken.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Repairable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the wheel is repairable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Stress",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCurrent stress on the wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_StressTolerance",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStress tolerance of the wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_StressPercentage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCurrent stress on the wheel as a percentage of its stress tolerance.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Deflection",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCurrent deflection of the wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Wheel_get_Slip",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Wheel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCurrent slip of the wheel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ReferenceFrame_static_CreateRelative",
                        parameters: [
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            },
                            Parameter {
                                name: "rotation",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    240,
                                    63,
                                ],
                            },
                            Parameter {
                                name: "velocity",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            },
                            Parameter {
                                name: "angularVelocity",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreate a relative reference frame. This is a custom reference frame\nwhose components offset the components of a parent reference frame.\n</summary>\n<param name=\"referenceFrame\">The parent reference frame on which to\nbase this reference frame.</param>\n<param name=\"position\">The offset of the position of the origin,\nas a position vector. Defaults to <math>(0, 0, 0)</math></param>\n<param name=\"rotation\">The rotation to apply to the parent frames rotation,\nas a quaternion of the form <math>(x, y, z, w)</math>.\nDefaults to <math>(0, 0, 0, 1)</math> (i.e. no rotation)</param>\n<param name=\"velocity\">The linear velocity to offset the parent frame by,\nas a vector pointing in the direction of travel, whose magnitude is the speed in\nmeters per second. Defaults to <math>(0, 0, 0)</math>.</param>\n<param name=\"angularVelocity\">The angular velocity to offset the parent frame by,\nas a vector. This vector points in the direction of the axis of rotation,\nand its magnitude is the speed of the rotation in radians per second.\nDefaults to <math>(0, 0, 0)</math>.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ReferenceFrame_static_CreateHybrid",
                        parameters: [
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "rotation",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                            Parameter {
                                name: "velocity",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                            Parameter {
                                name: "angularVelocity",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreate a hybrid reference frame. This is a custom reference frame\nwhose components inherited from other reference frames.\n</summary>\n<param name=\"position\">The reference frame providing the position of the origin.</param>\n<param name=\"rotation\">The reference frame providing the rotation of the frame.</param>\n<param name=\"velocity\">The reference frame providing the linear velocity of the frame.\n</param>\n<param name=\"angularVelocity\">The reference frame providing the angular velocity\nof the frame.</param>\n<remarks>\nThe <paramref name=\"position\" /> reference frame is required but all other\nreference frames are optional. If omitted, they are set to the\n<paramref name=\"position\" /> reference frame.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the resource.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_Part",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Part",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe part containing the resource.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_Max",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total amount of the resource that can be stored in the part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_Amount",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe amount of the resource that is currently stored in the part.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_Density",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe density of the resource, in <math>kg/l</math>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_FlowMode",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ResourceFlowMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe flow mode of the resource.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_get_Enabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether use of this resource is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resource_set_Enabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether use of this resource is enabled.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceTransfer_static_Start",
                        parameters: [
                            Parameter {
                                name: "fromPart",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "toPart",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Part",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "resource",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "maxAmount",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ResourceTransfer",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nStart transferring a resource transfer between a pair of parts. The transfer will move\nat most <paramref name=\"maxAmount\" /> units of the resource, depending on how much of\nthe resource is available in the source part and how much storage is available in the\ndestination part.\nUse <see cref=\"M:SpaceCenter.ResourceTransfer.Complete\" /> to check if the transfer is complete.\nUse <see cref=\"M:SpaceCenter.ResourceTransfer.Amount\" /> to see how much of the resource has been transferred.\n</summary>\n<param name=\"fromPart\">The part to transfer to.</param>\n<param name=\"toPart\">The part to transfer from.</param>\n<param name=\"resource\">The name of the resource to transfer.</param>\n<param name=\"maxAmount\">The maximum amount of resource to transfer.</param>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceTransfer_get_Complete",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceTransfer",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the transfer has completed.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "ResourceTransfer_get_Amount",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ResourceTransfer",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe amount of the resource that has been transferred.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_WithResource",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAll the individual resources with the given name that can be stored.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_HasResource",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCheck whether the named resource can be stored.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_Max",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the amount of a resource that can be stored.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_Amount",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the amount of a resource that is currently stored.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_static_Density",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the density of a resource, in <math>kg/l</math>.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_static_FlowMode",
                        parameters: [
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "ResourceFlowMode",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns the flow mode of a resource.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_get_All",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resource",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAll the individual resources that can be stored.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_get_Names",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of resource names that can be stored.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_get_Enabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether use of all the resources are enabled.\n</summary>\n<remarks>\nThis is <c>true</c> if all of the resources are enabled.\nIf any of the resources are not enabled, this is <c>false</c>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Resources_set_Enabled",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Resources",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether use of all the resources are enabled.\n</summary>\n<remarks>\nThis is <c>true</c> if all of the resources are enabled.\nIf any of the resources are not enabled, this is <c>false</c>.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_Recover",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRecover the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_Flight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Flight",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Flight\" /> object that can be used to get flight\ntelemetry for the vessel, in the specified reference frame.\n</summary>\n<param name=\"referenceFrame\">\nReference frame. Defaults to the vessel's surface reference frame\n(<see cref=\"M:SpaceCenter.Vessel.SurfaceReferenceFrame\" />).\n</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_ResourcesInDecoupleStage",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "stage",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "cumulative",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Resources",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Resources\" /> object, that can used to get\ninformation about resources stored in a given <paramref name=\"stage\" />.\n</summary>\n<param name=\"stage\">Get resources for parts that are decoupled in this stage.</param>\n<param name=\"cumulative\">When <c>false</c>, returns the resources for parts\ndecoupled in just the given stage. When <c>true</c> returns the resources decoupled in\nthe given stage and all subsequent stages combined.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe position of the center of mass of the vessel, in the given reference frame.\n</summary>\n<returns>The position as a vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_BoundingBox",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe axis-aligned bounding box of the vessel in the given reference frame.\n</summary>\n<returns>The positions of the minimum and maximum vertices of the box,\nas position vectors.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nposition vectors are in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_Velocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe velocity of the center of mass of the vessel, in the given reference frame.\n</summary>\n<returns>The velocity as a vector. The vector points in the direction of travel,\nand its magnitude is the speed of the body in meters per second.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nvelocity vector is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rotation of the vessel, in the given reference frame.\n</summary>\n<returns>The rotation as a quaternion of the form <math>(x, y, z, w)</math>.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\nrotation is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_Direction",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe direction in which the vessel is pointing, in the given reference frame.\n</summary>\n<returns>The direction as a unit vector.</returns>\n<param name=\"referenceFrame\">The reference frame that the returned\ndirection is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_AngularVelocity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "referenceFrame",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "ReferenceFrame",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe angular velocity of the vessel, in the given reference frame.\n</summary>\n<returns>The angular velocity as a vector. The magnitude of the vector is the rotational\nspeed of the vessel, in radians per second. The direction of the vector indicates the\naxis of rotation, using the right-hand rule.</returns>\n<param name=\"referenceFrame\">The reference frame the returned\nangular velocity is in.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_set_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Type",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "VesselType",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe type of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_set_Type",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "SpaceCenter",
                                        name: "VesselType",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe type of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Situation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "SpaceCenter",
                                name: "VesselSituation",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe situation the vessel is in.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Recoverable",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the vessel is recoverable.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_MET",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe mission elapsed time in seconds.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Biome",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the biome the vessel is currently in.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Orbit",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Orbit",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe current orbit of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Control",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Control",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Control\" /> object that can be used to manipulate\nthe vessel's control inputs. For example, its pitch/yaw/roll controls,\nRCS and thrust.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Comms",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Comms",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Comms\" /> object that can be used to interact\nwith CommNet for this vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AutoPilot",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "AutoPilot",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.AutoPilot\" /> object, that can be used to perform\nsimple auto-piloting of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_CrewCapacity",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe number of crew that can occupy the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_CrewCount",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe number of crew that are occupying the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Crew",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CrewMember",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe crew in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Resources",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Resources",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Resources\" /> object, that can used to get information\nabout resources stored in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Parts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Parts",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Parts\" /> object, that can used to interact with the parts that make up this vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Mass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total mass of the vessel, including resources, in kg.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_DryMass",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total mass of the vessel, excluding resources, in kg.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_Thrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total thrust currently being produced by the vessel's engines, in\nNewtons. This is computed by summing <see cref=\"M:SpaceCenter.Engine.Thrust\" /> for\nevery engine in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nGets the total available thrust that can be produced by the vessel's\nactive engines, in Newtons. This is computed by summing\n<see cref=\"M:SpaceCenter.Engine.AvailableThrust\" /> for every active engine in the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_MaxThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total maximum thrust that can be produced by the vessel's active\nengines, in Newtons. This is computed by summing\n<see cref=\"M:SpaceCenter.Engine.MaxThrust\" /> for every active engine.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_MaxVacuumThrust",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe total maximum thrust that can be produced by the vessel's active\nengines when the vessel is in a vacuum, in Newtons. This is computed by\nsumming <see cref=\"M:SpaceCenter.Engine.MaxVacuumThrust\" /> for every active engine.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_SpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe combined specific impulse of all active engines, in seconds. This is computed using the formula\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_VacuumSpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe combined vacuum specific impulse of all active engines, in seconds. This is computed using the formula\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_KerbinSeaLevelSpecificImpulse",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe combined specific impulse of all active engines at sea level on Kerbin, in seconds.\nThis is computed using the formula\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_MomentOfInertia",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe moment of inertia of the vessel around its center of mass in <math>kg.m^2</math>.\nThe inertia values in the returned 3-tuple are around the\npitch, roll and yaw directions respectively.\nThis corresponds to the vessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_InertiaTensor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe inertia tensor of the vessel around its center of mass,\nin the vessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nReturns the 3x3 matrix as a list of elements, in row-major order.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque that the vessel generates. Includes contributions from\nreaction wheels, RCS, gimballed engines and aerodynamic control surfaces.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableReactionWheelTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque that the currently active and powered reaction wheels can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableRCSTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque that the currently active RCS thrusters can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableEngineTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque that the currently active and gimballed engines can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableControlSurfaceTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque that the aerodynamic control surfaces can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_AvailableOtherTorque",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe maximum torque that parts (excluding reaction wheels, gimballed engines,\nRCS and control surfaces) can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_ReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel,\nand orientated with the vessel.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the vessel.</description></item><item><description>The x-axis points out to the right of the vessel.</description></item><item><description>The y-axis points in the forward direction of the vessel.</description></item><item><description>The z-axis points out of the bottom off the vessel.</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_OrbitalReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel,\nand orientated with the vessels orbital prograde/normal/radial directions.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the orbital prograde/normal/radial directions.</description></item><item><description>The x-axis points in the orbital anti-radial direction.</description></item><item><description>The y-axis points in the orbital prograde direction.</description></item><item><description>The z-axis points in the orbital normal direction.</description></item></list></summary>\n<remarks>\nBe careful not to confuse this with 'orbit' mode on the navball.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_SurfaceReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel,\nand orientated with the surface of the body being orbited.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the north and up directions on the surface of the body.</description></item><item><description>The x-axis points in the <a href=\"https://en.wikipedia.org/wiki/Zenith\">zenith</a>\ndirection (upwards, normal to the body being orbited, from the center of the body towards the center of\nmass of the vessel).</description></item><item><description>The y-axis points northwards towards the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a> (north, and tangential to the\nsurface of the body -- the direction in which a compass would point when on the surface).</description></item><item><description>The z-axis points eastwards towards the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a> (east, and tangential to the\nsurface of the body -- east on a compass when on the surface).</description></item></list></summary>\n<remarks>\nBe careful not to confuse this with 'surface' mode on the navball.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Vessel_get_SurfaceVelocityReferenceFrame",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Vessel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "ReferenceFrame",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel,\nand orientated with the velocity vector of the vessel relative\nto the surface of the body being orbited.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the vessel's velocity vector.</description></item><item><description>The y-axis points in the direction of the vessel's velocity vector,\nrelative to the surface of the body being orbited.</description></item><item><description>The z-axis is in the plane of the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a>.</description></item><item><description>The x-axis is orthogonal to the other two axes.</description></item></list></summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemoves the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Body",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "CelestialBody",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the waypoint is attached to.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_Body",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe celestial body the waypoint is attached to.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the waypoint as it appears on the map and the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_Name",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe name of the waypoint as it appears on the map and the contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe seed of the icon color. See <see cref=\"M:SpaceCenter.WaypointManager.Colors\" /> for example colors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe seed of the icon color. See <see cref=\"M:SpaceCenter.WaypointManager.Colors\" /> for example colors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Icon",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe icon of the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_Icon",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe icon of the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Latitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe latitude of the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_Latitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe latitude of the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Longitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe longitude of the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_Longitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe longitude of the waypoint.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_MeanAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude of the waypoint above sea level, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_MeanAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude of the waypoint above sea level, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_SurfaceAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body or sea level,\nwhichever is closer, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_SurfaceAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body or sea level,\nwhichever is closer, in meters.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_BedrockAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Double,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body, in meters.\nWhen over water, this is the altitude above the sea floor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_set_BedrockAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body, in meters.\nWhen over water, this is the altitude above the sea floor.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_NearSurface",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if the waypoint is near to the surface of a body.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Grounded",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if the waypoint is attached to the ground.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Index",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe integer index of this waypoint within its cluster of sibling waypoints.\nIn other words, when you have a cluster of waypoints called \"Somewhere Alpha\",\n\"Somewhere Beta\" and \"Somewhere Gamma\", the alpha site has index 0, the beta\nsite has index 1 and the gamma site has index 2.\nWhen <see cref=\"M:SpaceCenter.Waypoint.Clustered\" /> is <c>false</c>, this is zero.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Clustered",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary><c>true</c> if this waypoint is part of a set of clustered waypoints with greek letter\nnames appended (Alpha, Beta, Gamma, etc).\nIf <c>true</c>, there is a one-to-one correspondence with the greek letter name and\nthe <see cref=\"M:SpaceCenter.Waypoint.Index\" />.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_HasContract",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the waypoint belongs to a contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Waypoint_get_Contract",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Contract",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe associated contract.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "WaypointManager_AddWaypoint",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "WaypointManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "body",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Waypoint",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreates a waypoint at the given position at ground level, and returns a\n<see cref=\"T:SpaceCenter.Waypoint\" /> object that can be used to modify it.\n</summary>\n<param name=\"latitude\">Latitude of the waypoint.</param>\n<param name=\"longitude\">Longitude of the waypoint.</param>\n<param name=\"body\">Celestial body the waypoint is attached to.</param>\n<param name=\"name\">Name of the waypoint.</param>\n<returns></returns>\n</doc>",
                    },
                    Procedure {
                        name: "WaypointManager_AddWaypointAtAltitude",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "WaypointManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "latitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "longitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "altitude",
                                r#type: Some(
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "body",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "CelestialBody",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "name",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "SpaceCenter",
                                name: "Waypoint",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreates a waypoint at the given position and altitude, and returns a\n<see cref=\"T:SpaceCenter.Waypoint\" /> object that can be used to modify it.\n</summary>\n<param name=\"latitude\">Latitude of the waypoint.</param>\n<param name=\"longitude\">Longitude of the waypoint.</param>\n<param name=\"altitude\">Altitude (above sea level) of the waypoint.</param>\n<param name=\"body\">Celestial body the waypoint is attached to.</param>\n<param name=\"name\">Name of the waypoint.</param>\n<returns></returns>\n</doc>",
                    },
                    Procedure {
                        name: "WaypointManager_get_Waypoints",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "WaypointManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "Waypoint",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all existing waypoints.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "WaypointManager_get_Icons",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "WaypointManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nReturns all available icons (from \"GameData/Squad/Contracts/Icons/\").\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "WaypointManager_get_Colors",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "SpaceCenter",
                                        name: "WaypointManager",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Dictionary,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAn example map of known color - seed pairs.\nAny other integers may be used as seed.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "AutoPilot",
                        documentation: "<doc>\n<summary>\nProvides basic auto-piloting utilities for a vessel.\nCreated by calling <see cref=\"M:SpaceCenter.Vessel.AutoPilot\" />.\n</summary>\n<remarks>\nIf a client engages the auto-pilot and then closes its connection to the server,\nthe auto-pilot will be disengaged and its target reference frame, direction and roll\nreset to default.\n</remarks>\n</doc>",
                    },
                    Class {
                        name: "Camera",
                        documentation: "<doc>\n<summary>\nControls the game's camera.\nObtained by calling <see cref=\"M:SpaceCenter.Camera\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "CelestialBody",
                        documentation: "<doc>\n<summary>\nRepresents a celestial body (such as a planet or moon).\nSee <see cref=\"M:SpaceCenter.Bodies\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "CommLink",
                        documentation: "<doc>\n<summary>\nRepresents a communication node in the network. For example, a vessel or the KSC.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "CommNode",
                        documentation: "<doc>\n<summary>\nRepresents a communication node in the network. For example, a vessel or the KSC.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Comms",
                        documentation: "<doc>\n<summary>\nUsed to interact with CommNet for a given vessel.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Comms\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Contract",
                        documentation: "<doc>\n<summary>\nA contract. Can be accessed using <see cref=\"M:SpaceCenter.ContractManager\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ContractManager",
                        documentation: "<doc>\n<summary>\nContracts manager.\nObtained by calling <see cref=\"M:SpaceCenter.ContractManager\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ContractParameter",
                        documentation: "<doc>\n<summary>\nA contract parameter. See <see cref=\"M:SpaceCenter.Contract.Parameters\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Control",
                        documentation: "<doc>\n<summary>\nUsed to manipulate the controls of a vessel. This includes adjusting the\nthrottle, enabling/disabling systems such as SAS and RCS, or altering the\ndirection in which the vessel is pointing.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Control\" />.\n</summary>\n<remarks>\nControl inputs (such as pitch, yaw and roll) are zeroed when all clients\nthat have set one or more of these inputs are no longer connected.\n</remarks>\n</doc>",
                    },
                    Class {
                        name: "CrewMember",
                        documentation: "<doc>\n<summary>\nRepresents crew in a vessel. Can be obtained using <see cref=\"M:SpaceCenter.Vessel.Crew\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Flight",
                        documentation: "<doc>\n<summary>\nUsed to get flight telemetry for a vessel, by calling <see cref=\"M:SpaceCenter.Vessel.Flight\" />.\nAll of the information returned by this class is given in the reference frame\npassed to that method.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Flight\" />.\n</summary>\n<remarks>\nTo get orbital information, such as the apoapsis or inclination, see <see cref=\"T:SpaceCenter.Orbit\" />.\n</remarks>\n</doc>",
                    },
                    Class {
                        name: "Node",
                        documentation: "<doc>\n<summary>\nRepresents a maneuver node. Can be created using <see cref=\"M:SpaceCenter.Control.AddNode\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Orbit",
                        documentation: "<doc>\n<summary>\nDescribes an orbit. For example, the orbit of a vessel, obtained by calling\n<see cref=\"M:SpaceCenter.Vessel.Orbit\" />, or a celestial body, obtained by calling\n<see cref=\"M:SpaceCenter.CelestialBody.Orbit\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Antenna",
                        documentation: "<doc>\n<summary>\nAn antenna. Obtained by calling <see cref=\"M:SpaceCenter.Part.Antenna\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "CargoBay",
                        documentation: "<doc>\n<summary>\nA cargo bay. Obtained by calling <see cref=\"M:SpaceCenter.Part.CargoBay\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ControlSurface",
                        documentation: "<doc>\n<summary>\nAn aerodynamic control surface. Obtained by calling <see cref=\"M:SpaceCenter.Part.ControlSurface\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Decoupler",
                        documentation: "<doc>\n<summary>\nA decoupler. Obtained by calling <see cref=\"M:SpaceCenter.Part.Decoupler\" /></summary>\n</doc>",
                    },
                    Class {
                        name: "DockingPort",
                        documentation: "<doc>\n<summary>\nA docking port. Obtained by calling <see cref=\"M:SpaceCenter.Part.DockingPort\" /></summary>\n</doc>",
                    },
                    Class {
                        name: "Engine",
                        documentation: "<doc>\n<summary>\nAn engine, including ones of various types.\nFor example liquid fuelled gimballed engines, solid rocket boosters and jet engines.\nObtained by calling <see cref=\"M:SpaceCenter.Part.Engine\" />.\n</summary>\n<remarks>\nFor RCS thrusters <see cref=\"M:SpaceCenter.Part.RCS\" />.\n</remarks>\n</doc>",
                    },
                    Class {
                        name: "Experiment",
                        documentation: "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Part.Experiment\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Fairing",
                        documentation: "<doc>\n<summary>\nA fairing. Obtained by calling <see cref=\"M:SpaceCenter.Part.Fairing\" />.\nSupports both stock fairings, and those from the ProceduralFairings mod.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Force",
                        documentation: "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Part.AddForce\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Intake",
                        documentation: "<doc>\n<summary>\nAn air intake. Obtained by calling <see cref=\"M:SpaceCenter.Part.Intake\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "LaunchClamp",
                        documentation: "<doc>\n<summary>\nA launch clamp. Obtained by calling <see cref=\"M:SpaceCenter.Part.LaunchClamp\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Leg",
                        documentation: "<doc>\n<summary>\nA landing leg. Obtained by calling <see cref=\"M:SpaceCenter.Part.Leg\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Light",
                        documentation: "<doc>\n<summary>\nA light. Obtained by calling <see cref=\"M:SpaceCenter.Part.Light\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Module",
                        documentation: "<doc>\n<summary>\nThis can be used to interact with a specific part module. This includes part modules in\nstock KSP, and those added by mods.\n\nIn KSP, each part has zero or more\n<a href=\"https://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES\">PartModules</a>\nassociated with it. Each one contains some of the functionality of the part.\nFor example, an engine has a \"ModuleEngines\" part module that contains all the\nfunctionality of an engine.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Parachute",
                        documentation: "<doc>\n<summary>\nA parachute. Obtained by calling <see cref=\"M:SpaceCenter.Part.Parachute\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Part",
                        documentation: "<doc>\n<summary>\nRepresents an individual part. Vessels are made up of multiple parts.\nInstances of this class can be obtained by several methods in <see cref=\"T:SpaceCenter.Parts\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Parts",
                        documentation: "<doc>\n<summary>\nInstances of this class are used to interact with the parts of a vessel.\nAn instance can be obtained by calling <see cref=\"M:SpaceCenter.Vessel.Parts\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Propellant",
                        documentation: "<doc>\n<summary>\nA propellant for an engine. Obtains by calling <see cref=\"M:SpaceCenter.Engine.Propellants\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "RCS",
                        documentation: "<doc>\n<summary>\nAn RCS block or thruster. Obtained by calling <see cref=\"M:SpaceCenter.Part.RCS\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Radiator",
                        documentation: "<doc>\n<summary>\nA radiator. Obtained by calling <see cref=\"M:SpaceCenter.Part.Radiator\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ReactionWheel",
                        documentation: "<doc>\n<summary>\nA reaction wheel. Obtained by calling <see cref=\"M:SpaceCenter.Part.ReactionWheel\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ResourceConverter",
                        documentation: "<doc>\n<summary>\nA resource converter. Obtained by calling <see cref=\"M:SpaceCenter.Part.ResourceConverter\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ResourceHarvester",
                        documentation: "<doc>\n<summary>\nA resource harvester (drill). Obtained by calling <see cref=\"M:SpaceCenter.Part.ResourceHarvester\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "RoboticController",
                        documentation: "<doc>\n<summary>\nA robotic controller. Obtained by calling <see cref=\"M:SpaceCenter.Part.RoboticController\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ScienceData",
                        documentation: "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Experiment.Data\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ScienceSubject",
                        documentation: "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Experiment.ScienceSubject\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Sensor",
                        documentation: "<doc>\n<summary>\nA sensor, such as a thermometer. Obtained by calling <see cref=\"M:SpaceCenter.Part.Sensor\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "SolarPanel",
                        documentation: "<doc>\n<summary>\nA solar panel. Obtained by calling <see cref=\"M:SpaceCenter.Part.SolarPanel\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Thruster",
                        documentation: "<doc>\n<summary>\nThe component of an <see cref=\"T:SpaceCenter.Engine\" /> or <see cref=\"T:SpaceCenter.RCS\" /> part that generates thrust.\nCan obtained by calling <see cref=\"M:SpaceCenter.Engine.Thrusters\" /> or <see cref=\"M:SpaceCenter.RCS.Thrusters\" />.\n</summary>\n<remarks>\nEngines can consist of multiple thrusters.\nFor example, the S3 KS-25x4 \"Mammoth\" has four rocket nozzels, and so consists of\nfour thrusters.\n</remarks>\n</doc>",
                    },
                    Class {
                        name: "Wheel",
                        documentation: "<doc>\n<summary>\nA wheel. Includes landing gear and rover wheels.\nObtained by calling <see cref=\"M:SpaceCenter.Part.Wheel\" />.\nCan be used to control the motors, steering and deployment of wheels, among other things.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ReferenceFrame",
                        documentation: "<doc>\n<summary>\nRepresents a reference frame for positions, rotations and\nvelocities. Contains:\n<list type=\"bullet\"><item><description>The position of the origin.</description></item><item><description>The directions of the x, y and z axes.</description></item><item><description>The linear velocity of the frame.</description></item><item><description>The angular velocity of the frame.</description></item></list></summary>\n<remarks>\nThis class does not contain any properties or methods. It is only\nused as a parameter to other functions.\n</remarks>\n</doc>",
                    },
                    Class {
                        name: "Resource",
                        documentation: "<doc>\n<summary>\nAn individual resource stored within a part.\nCreated using methods in the <see cref=\"T:SpaceCenter.Resources\" /> class.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "ResourceTransfer",
                        documentation: "<doc>\n<summary>\nTransfer resources between parts.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Resources",
                        documentation: "<doc>\n<summary>\nRepresents the collection of resources stored in a vessel, stage or part.\nCreated by calling <see cref=\"M:SpaceCenter.Vessel.Resources\" />,\n<see cref=\"M:SpaceCenter.Vessel.ResourcesInDecoupleStage\" /> or\n<see cref=\"M:SpaceCenter.Part.Resources\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Vessel",
                        documentation: "<doc>\n<summary>\nThese objects are used to interact with vessels in KSP. This includes getting\norbital and flight data, manipulating control inputs and managing resources.\nCreated using <see cref=\"M:SpaceCenter.ActiveVessel\" /> or <see cref=\"M:SpaceCenter.Vessels\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Waypoint",
                        documentation: "<doc>\n<summary>\nRepresents a waypoint. Can be created using <see cref=\"M:SpaceCenter.WaypointManager.AddWaypoint\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "WaypointManager",
                        documentation: "<doc>\n<summary>\nWaypoints are the location markers you can see on the map view showing you where contracts are targeted for.\nWith this structure, you can obtain coordinate data for the locations of these waypoints.\nObtained by calling <see cref=\"M:SpaceCenter.WaypointManager\" />.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [
                    Enumeration {
                        name: "CameraMode",
                        values: [
                            EnumerationValue {
                                name: "Automatic",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe camera is showing the active vessel, in \"auto\" mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Free",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe camera is showing the active vessel, in \"free\" mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Chase",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe camera is showing the active vessel, in \"chase\" mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Locked",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe camera is showing the active vessel, in \"locked\" mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Orbital",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe camera is showing the active vessel, in \"orbital\" mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "IVA",
                                value: 5,
                                documentation: "<doc>\n<summary>\nThe Intra-Vehicular Activity view is being shown.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Map",
                                value: 6,
                                documentation: "<doc>\n<summary>\nThe map view is being shown.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nSee <see cref=\"M:SpaceCenter.Camera.Mode\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "CommLinkType",
                        values: [
                            EnumerationValue {
                                name: "Home",
                                value: 0,
                                documentation: "<doc>\n<summary>\nLink is to a base station on Kerbin.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Control",
                                value: 1,
                                documentation: "<doc>\n<summary>\nLink is to a control source, for example a manned spacecraft.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Relay",
                                value: 2,
                                documentation: "<doc>\n<summary>\nLink is to a relay satellite.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe type of a communication link.\nSee <see cref=\"M:SpaceCenter.CommLink.Type\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ContractState",
                        values: [
                            EnumerationValue {
                                name: "Active",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe contract is active.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Canceled",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe contract has been canceled.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Completed",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe contract has been completed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "DeadlineExpired",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe deadline for the contract has expired.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Declined",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe contract has been declined.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Failed",
                                value: 5,
                                documentation: "<doc>\n<summary>\nThe contract has been failed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Generated",
                                value: 6,
                                documentation: "<doc>\n<summary>\nThe contract has been generated.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Offered",
                                value: 7,
                                documentation: "<doc>\n<summary>\nThe contract has been offered to the player.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "OfferExpired",
                                value: 8,
                                documentation: "<doc>\n<summary>\nThe contract was offered to the player, but the offer expired.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Withdrawn",
                                value: 9,
                                documentation: "<doc>\n<summary>\nThe contract has been withdrawn.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a contract. See <see cref=\"M:SpaceCenter.Contract.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ControlInputMode",
                        values: [
                            EnumerationValue {
                                name: "Additive",
                                value: 0,
                                documentation: "<doc>\n<summary>\nControl inputs are added to the vessels current control inputs.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Override",
                                value: 1,
                                documentation: "<doc>\n<summary>\nControl inputs (when they are non-zero) override the vessels current control inputs.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nSee <see cref=\"M:SpaceCenter.Control.InputMode\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ControlSource",
                        values: [
                            EnumerationValue {
                                name: "Kerbal",
                                value: 0,
                                documentation: "<doc>\n<summary>\nVessel is controlled by a Kerbal.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Probe",
                                value: 1,
                                documentation: "<doc>\n<summary>\nVessel is controlled by a probe core.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "None",
                                value: 2,
                                documentation: "<doc>\n<summary>\nVessel is not controlled.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe control source of a vessel.\nSee <see cref=\"M:SpaceCenter.Control.Source\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ControlState",
                        values: [
                            EnumerationValue {
                                name: "Full",
                                value: 0,
                                documentation: "<doc>\n<summary>\nFull controllable.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Partial",
                                value: 1,
                                documentation: "<doc>\n<summary>\nPartially controllable.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "None",
                                value: 2,
                                documentation: "<doc>\n<summary>\nNot controllable.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe control state of a vessel.\nSee <see cref=\"M:SpaceCenter.Control.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "CrewMemberType",
                        values: [
                            EnumerationValue {
                                name: "Applicant",
                                value: 0,
                                documentation: "<doc>\n<summary>\nAn applicant for crew.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Crew",
                                value: 1,
                                documentation: "<doc>\n<summary>\nRocket crew.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Tourist",
                                value: 2,
                                documentation: "<doc>\n<summary>\nA tourist.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Unowned",
                                value: 3,
                                documentation: "<doc>\n<summary>\nAn unowned crew member.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe type of a crew member.\nSee <see cref=\"M:SpaceCenter.CrewMember.Type\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "GameMode",
                        values: [
                            EnumerationValue {
                                name: "Sandbox",
                                value: 0,
                                documentation: "<doc>\n<summary>\nSandbox mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Career",
                                value: 1,
                                documentation: "<doc>\n<summary>\nCareer mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Science",
                                value: 2,
                                documentation: "<doc>\n<summary>\nScience career mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "ScienceSandbox",
                                value: 3,
                                documentation: "<doc>\n<summary>\nScience sandbox mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Mission",
                                value: 4,
                                documentation: "<doc>\n<summary>\nMission mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "MissionBuilder",
                                value: 5,
                                documentation: "<doc>\n<summary>\nMission builder mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Scenario",
                                value: 6,
                                documentation: "<doc>\n<summary>\nScenario mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "ScenarioNonResumable",
                                value: 7,
                                documentation: "<doc>\n<summary>\nScenario mode that cannot be resumed.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe game mode.\nReturned by <see cref=\"T:SpaceCenter.GameMode\" /></summary>\n</doc>",
                    },
                    Enumeration {
                        name: "AntennaState",
                        values: [
                            EnumerationValue {
                                name: "Deployed",
                                value: 0,
                                documentation: "<doc>\n<summary>\nAntenna is fully deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracted",
                                value: 1,
                                documentation: "<doc>\n<summary>\nAntenna is fully retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Deploying",
                                value: 2,
                                documentation: "<doc>\n<summary>\nAntenna is being deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracting",
                                value: 3,
                                documentation: "<doc>\n<summary>\nAntenna is being retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Broken",
                                value: 4,
                                documentation: "<doc>\n<summary>\nAntenna is broken.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of an antenna. See <see cref=\"M:SpaceCenter.Antenna.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "CargoBayState",
                        values: [
                            EnumerationValue {
                                name: "Open",
                                value: 0,
                                documentation: "<doc>\n<summary>\nCargo bay is fully open.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Closed",
                                value: 1,
                                documentation: "<doc>\n<summary>\nCargo bay closed and locked.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Opening",
                                value: 2,
                                documentation: "<doc>\n<summary>\nCargo bay is opening.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Closing",
                                value: 3,
                                documentation: "<doc>\n<summary>\nCargo bay is closing.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a cargo bay. See <see cref=\"M:SpaceCenter.CargoBay.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "DockingPortState",
                        values: [
                            EnumerationValue {
                                name: "Ready",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe docking port is ready to dock to another docking port.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Docked",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe docking port is docked to another docking port, or docked to\nanother part (from the VAB/SPH).\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Docking",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe docking port is very close to another docking port,\nbut has not docked. It is using magnetic force to acquire a solid dock.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Undocking",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe docking port has just been undocked from another docking port,\nand is disabled until it moves away by a sufficient distance\n(<see cref=\"M:SpaceCenter.DockingPort.ReengageDistance\" />).\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Shielded",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe docking port has a shield, and the shield is closed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Moving",
                                value: 5,
                                documentation: "<doc>\n<summary>\nThe docking ports shield is currently opening/closing.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a docking port. See <see cref=\"M:SpaceCenter.DockingPort.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "LegState",
                        values: [
                            EnumerationValue {
                                name: "Deployed",
                                value: 0,
                                documentation: "<doc>\n<summary>\nLanding leg is fully deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracted",
                                value: 1,
                                documentation: "<doc>\n<summary>\nLanding leg is fully retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Deploying",
                                value: 2,
                                documentation: "<doc>\n<summary>\nLanding leg is being deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracting",
                                value: 3,
                                documentation: "<doc>\n<summary>\nLanding leg is being retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Broken",
                                value: 4,
                                documentation: "<doc>\n<summary>\nLanding leg is broken.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a landing leg. See <see cref=\"M:SpaceCenter.Leg.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "MotorState",
                        values: [
                            EnumerationValue {
                                name: "Idle",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe motor is idle.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Running",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe motor is running.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Disabled",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe motor is disabled.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Inoperable",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe motor is inoperable.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "NotEnoughResources",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe motor does not have enough resources to run.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of the motor on a powered wheel. See <see cref=\"M:SpaceCenter.Wheel.MotorState\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ParachuteState",
                        values: [
                            EnumerationValue {
                                name: "Stowed",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe parachute is safely tucked away inside its housing.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Armed",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe parachute is armed for deployment. (RealChutes only)\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Active",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe parachute is still stowed, but ready to semi-deploy.\n(Stock parachutes only)\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "SemiDeployed",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe parachute has been deployed and is providing some drag,\nbut is not fully deployed yet. (Stock parachutes only)\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Deployed",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe parachute is fully deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Cut",
                                value: 5,
                                documentation: "<doc>\n<summary>\nThe parachute has been cut.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a parachute. See <see cref=\"M:SpaceCenter.Parachute.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "RadiatorState",
                        values: [
                            EnumerationValue {
                                name: "Extended",
                                value: 0,
                                documentation: "<doc>\n<summary>\nRadiator is fully extended.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracted",
                                value: 1,
                                documentation: "<doc>\n<summary>\nRadiator is fully retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Extending",
                                value: 2,
                                documentation: "<doc>\n<summary>\nRadiator is being extended.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracting",
                                value: 3,
                                documentation: "<doc>\n<summary>\nRadiator is being retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Broken",
                                value: 4,
                                documentation: "<doc>\n<summary>\nRadiator is being broken.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a radiator. <see cref=\"T:SpaceCenter.RadiatorState\" /></summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ResourceConverterState",
                        values: [
                            EnumerationValue {
                                name: "Running",
                                value: 0,
                                documentation: "<doc>\n<summary>\nConverter is running.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Idle",
                                value: 1,
                                documentation: "<doc>\n<summary>\nConverter is idle.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "MissingResource",
                                value: 2,
                                documentation: "<doc>\n<summary>\nConverter is missing a required resource.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "StorageFull",
                                value: 3,
                                documentation: "<doc>\n<summary>\nNo available storage for output resource.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Capacity",
                                value: 4,
                                documentation: "<doc>\n<summary>\nAt preset resource capacity.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Unknown",
                                value: 5,
                                documentation: "<doc>\n<summary>\nUnknown state. Possible with modified resource converters.\nIn this case, check <see cref=\"M:SpaceCenter.ResourceConverter.StatusInfo\" /> for more information.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a resource converter. See <see cref=\"M:SpaceCenter.ResourceConverter.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ResourceHarvesterState",
                        values: [
                            EnumerationValue {
                                name: "Deploying",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe drill is deploying.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Deployed",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe drill is deployed and ready.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracting",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe drill is retracting.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracted",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe drill is retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Active",
                                value: 4,
                                documentation: "<doc>\n<summary>\nThe drill is running.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a resource harvester. See <see cref=\"M:SpaceCenter.ResourceHarvester.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "SolarPanelState",
                        values: [
                            EnumerationValue {
                                name: "Extended",
                                value: 0,
                                documentation: "<doc>\n<summary>\nSolar panel is fully extended.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracted",
                                value: 1,
                                documentation: "<doc>\n<summary>\nSolar panel is fully retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Extending",
                                value: 2,
                                documentation: "<doc>\n<summary>\nSolar panel is being extended.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracting",
                                value: 3,
                                documentation: "<doc>\n<summary>\nSolar panel is being retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Broken",
                                value: 4,
                                documentation: "<doc>\n<summary>\nSolar panel is broken.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a solar panel. See <see cref=\"M:SpaceCenter.SolarPanel.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "WheelState",
                        values: [
                            EnumerationValue {
                                name: "Deployed",
                                value: 0,
                                documentation: "<doc>\n<summary>\nWheel is fully deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracted",
                                value: 1,
                                documentation: "<doc>\n<summary>\nWheel is fully retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Deploying",
                                value: 2,
                                documentation: "<doc>\n<summary>\nWheel is being deployed.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retracting",
                                value: 3,
                                documentation: "<doc>\n<summary>\nWheel is being retracted.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Broken",
                                value: 4,
                                documentation: "<doc>\n<summary>\nWheel is broken.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe state of a wheel. See <see cref=\"M:SpaceCenter.Wheel.State\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "ResourceFlowMode",
                        values: [
                            EnumerationValue {
                                name: "Vessel",
                                value: 0,
                                documentation: "<doc>\n<summary>\nThe resource flows to any part in the vessel. For example, electric charge.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Stage",
                                value: 1,
                                documentation: "<doc>\n<summary>\nThe resource flows from parts in the first stage, followed by the second,\nand so on. For example, mono-propellant.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Adjacent",
                                value: 2,
                                documentation: "<doc>\n<summary>\nThe resource flows between adjacent parts within the vessel. For example,\nliquid fuel or oxidizer.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "None",
                                value: 3,
                                documentation: "<doc>\n<summary>\nThe resource does not flow. For example, solid fuel.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe way in which a resource flows between parts. See <see cref=\"M:SpaceCenter.Resources.FlowMode\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "SASMode",
                        values: [
                            EnumerationValue {
                                name: "StabilityAssist",
                                value: 0,
                                documentation: "<doc>\n<summary>\nStability assist mode. Dampen out any rotation.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Maneuver",
                                value: 1,
                                documentation: "<doc>\n<summary>\nPoint in the burn direction of the next maneuver node.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Prograde",
                                value: 2,
                                documentation: "<doc>\n<summary>\nPoint in the prograde direction.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Retrograde",
                                value: 3,
                                documentation: "<doc>\n<summary>\nPoint in the retrograde direction.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Normal",
                                value: 4,
                                documentation: "<doc>\n<summary>\nPoint in the orbit normal direction.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "AntiNormal",
                                value: 5,
                                documentation: "<doc>\n<summary>\nPoint in the orbit anti-normal direction.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Radial",
                                value: 6,
                                documentation: "<doc>\n<summary>\nPoint in the orbit radial direction.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "AntiRadial",
                                value: 7,
                                documentation: "<doc>\n<summary>\nPoint in the orbit anti-radial direction.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Target",
                                value: 8,
                                documentation: "<doc>\n<summary>\nPoint in the direction of the current target.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "AntiTarget",
                                value: 9,
                                documentation: "<doc>\n<summary>\nPoint away from the current target.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe behavior of the SAS auto-pilot. See <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "SpeedMode",
                        values: [
                            EnumerationValue {
                                name: "Orbit",
                                value: 0,
                                documentation: "<doc>\n<summary>\nSpeed is relative to the vessel's orbit.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Surface",
                                value: 1,
                                documentation: "<doc>\n<summary>\nSpeed is relative to the surface of the body being orbited.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Target",
                                value: 2,
                                documentation: "<doc>\n<summary>\nSpeed is relative to the current target.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe mode of the speed reported in the navball.\nSee <see cref=\"M:SpaceCenter.Control.SpeedMode\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "VesselSituation",
                        values: [
                            EnumerationValue {
                                name: "PreLaunch",
                                value: 0,
                                documentation: "<doc>\n<summary>\nVessel is awaiting launch.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Orbiting",
                                value: 1,
                                documentation: "<doc>\n<summary>\nVessel is orbiting a body.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "SubOrbital",
                                value: 2,
                                documentation: "<doc>\n<summary>\nVessel is on a sub-orbital trajectory.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Escaping",
                                value: 3,
                                documentation: "<doc>\n<summary>\nEscaping.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Flying",
                                value: 4,
                                documentation: "<doc>\n<summary>\nVessel is flying through an atmosphere.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Landed",
                                value: 5,
                                documentation: "<doc>\n<summary>\nVessel is landed on the surface of a body.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Splashed",
                                value: 6,
                                documentation: "<doc>\n<summary>\nVessel has splashed down in an ocean.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Docked",
                                value: 7,
                                documentation: "<doc>\n<summary>\nVessel is docked to another.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe situation a vessel is in.\nSee <see cref=\"M:SpaceCenter.Vessel.Situation\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "VesselType",
                        values: [
                            EnumerationValue {
                                name: "Base",
                                value: 0,
                                documentation: "<doc>\n<summary>\nBase.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Debris",
                                value: 1,
                                documentation: "<doc>\n<summary>\nDebris.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Lander",
                                value: 2,
                                documentation: "<doc>\n<summary>\nLander.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Plane",
                                value: 3,
                                documentation: "<doc>\n<summary>\nPlane.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Probe",
                                value: 4,
                                documentation: "<doc>\n<summary>\nProbe.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Relay",
                                value: 5,
                                documentation: "<doc>\n<summary>\nRelay.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Rover",
                                value: 6,
                                documentation: "<doc>\n<summary>\nRover.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Ship",
                                value: 7,
                                documentation: "<doc>\n<summary>\nShip.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Station",
                                value: 8,
                                documentation: "<doc>\n<summary>\nStation.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe type of a vessel.\nSee <see cref=\"M:SpaceCenter.Vessel.Type\" />.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "WarpMode",
                        values: [
                            EnumerationValue {
                                name: "Rails",
                                value: 0,
                                documentation: "<doc>\n<summary>\nTime warp is active, and in regular \"on-rails\" mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Physics",
                                value: 1,
                                documentation: "<doc>\n<summary>\nTime warp is active, and in physical time warp mode.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "None",
                                value: 2,
                                documentation: "<doc>\n<summary>\nTime warp is not active.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nThe time warp mode.\nReturned by <see cref=\"T:SpaceCenter.WarpMode\" /></summary>\n</doc>",
                    },
                ],
                exceptions: [],
                documentation: "<doc>\n<summary>\nProvides functionality to interact with Kerbal Space Program. This includes controlling\nthe active vessel, managing its resources, planning maneuver nodes and auto-piloting.\n</summary>\n</doc>",
            },
            Service {
                name: "UI",
                procedures: [
                    Procedure {
                        name: "AddCanvas",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Canvas",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd a new canvas.\n</summary>\n<remarks>\nIf you want to add UI elements to KSPs stock UI canvas, use <see cref=\"M:UI.StockCanvas\" />.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Message",
                        parameters: [
                            Parameter {
                                name: "content",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "duration",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    128,
                                    63,
                                ],
                            },
                            Parameter {
                                name: "position",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "UI",
                                        name: "MessagePosition",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    2,
                                ],
                            },
                            Parameter {
                                name: "color",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [
                                    10,
                                    8,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    240,
                                    63,
                                    10,
                                    8,
                                    113,
                                    61,
                                    10,
                                    215,
                                    163,
                                    112,
                                    237,
                                    63,
                                    10,
                                    8,
                                    252,
                                    169,
                                    241,
                                    210,
                                    77,
                                    98,
                                    144,
                                    63,
                                ],
                            },
                            Parameter {
                                name: "size",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                    0,
                                    160,
                                    65,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nDisplay a message on the screen.\n</summary>\n<remarks>\nThe message appears just like a stock message, for example quicksave or quickload messages.\n</remarks>\n<param name=\"content\">Message content.</param>\n<param name=\"duration\">Duration before the message disappears, in seconds.</param>\n<param name=\"position\">Position to display the message.</param>\n<param name=\"size\">Size of the message, differs per position.</param>\n<param name=\"color\">The color of the message.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Clear",
                        parameters: [
                            Parameter {
                                name: "clientOnly",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    0,
                                ],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove all user interface elements.\n</summary>\n<param name=\"clientOnly\">If true, only remove objects created by the calling client.</param>\n</doc>",
                    },
                    Procedure {
                        name: "get_StockCanvas",
                        parameters: [],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Canvas",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe stock UI canvas.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Button_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the UI object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Button_get_RectTransform",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "RectTransform",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rect transform for the text.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Button_get_Text",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Text",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe text for the button.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Button_get_Clicked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the button has been clicked.\n</summary>\n<remarks>\nThis property is set to true when the user clicks the button.\nA client script should reset the property to false in order to detect subsequent button presses.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Button_set_Clicked",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the button has been clicked.\n</summary>\n<remarks>\nThis property is set to true when the user clicks the button.\nA client script should reset the property to false in order to detect subsequent button presses.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "Button_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Button_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Button",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_AddPanel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Panel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreate a new container for user interface elements.\n</summary>\n<param name=\"visible\">Whether the panel is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_AddText",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "content",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Text",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd text to the canvas.\n</summary>\n<param name=\"content\">The text.</param>\n<param name=\"visible\">Whether the text is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_AddInputField",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "InputField",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd an input field to the canvas.\n</summary>\n<param name=\"visible\">Whether the input field is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_AddButton",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "content",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Button",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd a button to the canvas.\n</summary>\n<param name=\"content\">The label for the button.</param>\n<param name=\"visible\">Whether the button is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the UI object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_get_RectTransform",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "RectTransform",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rect transform for the canvas.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Canvas_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Canvas",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the UI object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_get_RectTransform",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "RectTransform",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rect transform for the input field.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_get_Value",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe value of the input field.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_set_Value",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe value of the input field.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_get_Text",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Text",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe text component of the input field.\n</summary>\n<remarks>\nUse <see cref=\"M:UI.InputField.Value\" /> to get and set the value in the field.\nThis object can be used to alter the style of the input field's text.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_get_Changed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the input field has been changed.\n</summary>\n<remarks>\nThis property is set to true when the user modifies the value of the input field.\nA client script should reset the property to false in order to detect subsequent changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_set_Changed",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the input field has been changed.\n</summary>\n<remarks>\nThis property is set to true when the user modifies the value of the input field.\nA client script should reset the property to false in order to detect subsequent changes.\n</remarks>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "InputField_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "InputField",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_AddPanel",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Panel",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nCreate a panel within this panel.\n</summary>\n<param name=\"visible\">Whether the new panel is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_AddText",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "content",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Text",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd text to the panel.\n</summary>\n<param name=\"content\">The text.</param>\n<param name=\"visible\">Whether the text is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_AddInputField",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "InputField",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd an input field to the panel.\n</summary>\n<param name=\"visible\">Whether the input field is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_AddButton",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "content",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "visible",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [
                                    1,
                                ],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "Button",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAdd a button to the panel.\n</summary>\n<param name=\"content\">The label for the button.</param>\n<param name=\"visible\">Whether the button is visible.</param>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the UI object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_get_RectTransform",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "RectTransform",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rect transform for the panel.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Panel_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Panel",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_Position",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_LocalPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_LocalPosition",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_Size",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWidth and height of the rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_Size",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWidth and height of the rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_UpperRight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles upper right corner relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_UpperRight",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles upper right corner relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_LowerLeft",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles lower left corner relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_LowerLeft",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nPosition of the rectangles lower left corner relative to the anchors.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_Anchor",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the minimum and maximum anchor points as a fraction of the size of the parent rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_AnchorMax",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_AnchorMax",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_AnchorMin",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_AnchorMin",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_Pivot",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLocation of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_Pivot",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLocation of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRotation, as a quaternion, of the object around its pivot point.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_Rotation",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRotation, as a quaternion, of the object around its pivot point.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_get_Scale",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nScale factor applied to the object in the x, y and z dimensions.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "RectTransform_set_Scale",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "RectTransform",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nScale factor applied to the object in the x, y and z dimensions.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_Remove",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nRemove the UI object.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_RectTransform",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Class,
                                service: "UI",
                                name: "RectTransform",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe rect transform for the text.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_AvailableFonts",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: List,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nA list of all available fonts.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Content",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe text string\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Content",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nThe text string\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Font",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: String,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nName of the font\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Font",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: String,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nName of the font\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Size",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Sint32,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont size.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Size",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Sint32,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont size.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Style",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "UI",
                                name: "FontStyle",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont style.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Style",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "UI",
                                        name: "FontStyle",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nFont style.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Alignment",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Enumeration,
                                service: "UI",
                                name: "TextAnchor",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAlignment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Alignment",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Enumeration,
                                        service: "UI",
                                        name: "TextAnchor",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nAlignment.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_LineSpacing",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Float,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLine spacing.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_LineSpacing",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Float,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nLine spacing.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Tuple,
                                service: "",
                                name: "",
                                types: [
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                    Type {
                                        code: Double,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Color",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Tuple,
                                        service: "",
                                        name: "",
                                        types: [
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                            Type {
                                                code: Double,
                                                service: "",
                                                name: "",
                                                types: [],
                                            },
                                        ],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nSet the color\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_get_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: Some(
                            Type {
                                code: Bool,
                                service: "",
                                name: "",
                                types: [],
                            },
                        ),
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                    Procedure {
                        name: "Text_set_Visible",
                        parameters: [
                            Parameter {
                                name: "this",
                                r#type: Some(
                                    Type {
                                        code: Class,
                                        service: "UI",
                                        name: "Text",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                            Parameter {
                                name: "value",
                                r#type: Some(
                                    Type {
                                        code: Bool,
                                        service: "",
                                        name: "",
                                        types: [],
                                    },
                                ),
                                default_value: [],
                            },
                        ],
                        return_type: None,
                        return_is_nullable: false,
                        game_scenes: [],
                        documentation: "<doc>\n<summary>\nWhether the UI object is visible.\n</summary>\n</doc>",
                    },
                ],
                classes: [
                    Class {
                        name: "Button",
                        documentation: "<doc>\n<summary>\nA text label. See <see cref=\"M:UI.Panel.AddButton\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Canvas",
                        documentation: "<doc>\n<summary>\nA canvas for user interface elements. See <see cref=\"M:UI.StockCanvas\" /> and <see cref=\"M:UI.AddCanvas\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "InputField",
                        documentation: "<doc>\n<summary>\nAn input field. See <see cref=\"M:UI.Panel.AddInputField\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Panel",
                        documentation: "<doc>\n<summary>\nA container for user interface elements. See <see cref=\"M:UI.Canvas.AddPanel\" />.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "RectTransform",
                        documentation: "<doc>\n<summary>\nA Unity engine Rect Transform for a UI object.\nSee the <a href=\"https://docs.unity3d.com/Manual/class-RectTransform.html\">Unity manual</a> for more details.\n</summary>\n</doc>",
                    },
                    Class {
                        name: "Text",
                        documentation: "<doc>\n<summary>\nA text label. See <see cref=\"M:UI.Panel.AddText\" />.\n</summary>\n</doc>",
                    },
                ],
                enumerations: [
                    Enumeration {
                        name: "FontStyle",
                        values: [
                            EnumerationValue {
                                name: "Normal",
                                value: 0,
                                documentation: "<doc>\n<summary>\nNormal.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Bold",
                                value: 1,
                                documentation: "<doc>\n<summary>\nBold.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Italic",
                                value: 2,
                                documentation: "<doc>\n<summary>\nItalic.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "BoldAndItalic",
                                value: 3,
                                documentation: "<doc>\n<summary>\nBold and italic.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nFont style.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "MessagePosition",
                        values: [
                            EnumerationValue {
                                name: "BottomCenter",
                                value: 0,
                                documentation: "<doc>\n<summary>\nBottom center.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "TopCenter",
                                value: 1,
                                documentation: "<doc>\n<summary>\nTop center.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "TopLeft",
                                value: 2,
                                documentation: "<doc>\n<summary>\nTop left.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "TopRight",
                                value: 3,
                                documentation: "<doc>\n<summary>\nTop right.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nMessage position.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "TextAlignment",
                        values: [
                            EnumerationValue {
                                name: "Left",
                                value: 0,
                                documentation: "<doc>\n<summary>\nLeft aligned.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Right",
                                value: 1,
                                documentation: "<doc>\n<summary>\nRight aligned.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "Center",
                                value: 2,
                                documentation: "<doc>\n<summary>\nCenter aligned.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nText alignment.\n</summary>\n</doc>",
                    },
                    Enumeration {
                        name: "TextAnchor",
                        values: [
                            EnumerationValue {
                                name: "LowerCenter",
                                value: 0,
                                documentation: "<doc>\n<summary>\nLower center.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "LowerLeft",
                                value: 1,
                                documentation: "<doc>\n<summary>\nLower left.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "LowerRight",
                                value: 2,
                                documentation: "<doc>\n<summary>\nLower right.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "MiddleCenter",
                                value: 3,
                                documentation: "<doc>\n<summary>\nMiddle center.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "MiddleLeft",
                                value: 4,
                                documentation: "<doc>\n<summary>\nMiddle left.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "MiddleRight",
                                value: 5,
                                documentation: "<doc>\n<summary>\nMiddle right.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "UpperCenter",
                                value: 6,
                                documentation: "<doc>\n<summary>\nUpper center.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "UpperLeft",
                                value: 7,
                                documentation: "<doc>\n<summary>\nUpper left.\n</summary>\n</doc>",
                            },
                            EnumerationValue {
                                name: "UpperRight",
                                value: 8,
                                documentation: "<doc>\n<summary>\nUpper right.\n</summary>\n</doc>",
                            },
                        ],
                        documentation: "<doc>\n<summary>\nText alignment.\n</summary>\n</doc>",
                    },
                ],
                exceptions: [],
                documentation: "<doc>\n<summary>\nProvides functionality for drawing and interacting with in-game user interface elements.\n</summary>\n<remarks>\nFor drawing 3D objects in the flight scene, see the Drawing service.\n</remarks>\n</doc>",
            },
        ],
    },
)